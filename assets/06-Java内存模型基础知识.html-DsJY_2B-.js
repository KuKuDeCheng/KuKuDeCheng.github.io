import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as e,a as n}from"./app-BeeusqHN.js";const i="/assets/1-CyCI_qXn.png",l="/assets/2-C7GeqKkT.png",o="/assets/3-CM7_D4ze.jpg",p={},r=n('<h2 id="_6-1-并发编程模型的两个关键问题" tabindex="-1"><a class="header-anchor" href="#_6-1-并发编程模型的两个关键问题"><span>6.1 并发编程模型的两个关键问题</span></a></h2><ul><li>线程间如何通信？即：线程之间以何种机制来交换信息</li><li>线程间如何同步？即：线程以何种机制来控制不同线程间操作发生的相对顺序</li></ul><p>有两种并发模型可以解决这两个问题：</p><ul><li>消息传递并发模型</li><li>共享内存并发模型</li></ul><p>这两种模型之间的区别如下表所示： <img src="'+i+'" alt="" loading="lazy"></p><p><strong>在Java中，使用的是共享内存并发模型</strong>。</p><h2 id="_6-2-java内存模型的抽象结构" tabindex="-1"><a class="header-anchor" href="#_6-2-java内存模型的抽象结构"><span>6.2 Java内存模型的抽象结构</span></a></h2><h3 id="_6-2-1-运行时内存的划分" tabindex="-1"><a class="header-anchor" href="#_6-2-1-运行时内存的划分"><span>6.2.1 运行时内存的划分</span></a></h3><p>先谈一下运行时数据区，下面这张图相信大家一点都不陌生：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于每一个线程来说，栈都是私有的，而堆是共有的。</p><p>也就是说在栈中的变量（局部变量、方法定义参数、异常处理器参数）不会在线程之间共享，也就不会有内存可见性（下文会说到）的问题，也不受内存模型的影响。而在堆中的变量是共享的，本文称为共享变量。</p><p>所以，内存可见性是针对的<strong>共享变量</strong>。</p><h3 id="_6-2-2-既然堆是共享的-为什么在堆中会有内存不可见问题" tabindex="-1"><a class="header-anchor" href="#_6-2-2-既然堆是共享的-为什么在堆中会有内存不可见问题"><span>6.2.2 既然堆是共享的，为什么在堆中会有内存不可见问题？</span></a></h3><p>这是因为现代计算机为了高效，往往会在高速缓存区中缓存共享变量，因为cpu访问缓存区比访问内存要快得多。</p><blockquote><p>线程之间的共享变量存在主内存中，每个线程都有一个私有的本地内存，存储了该线程以读、写共享变量的副本。本地内存是Java内存模型的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器等。</p></blockquote><p>Java线程之间的通信由Java内存模型（简称JMM）控制，从抽象的角度来说，JMM定义了线程和主内存之间的抽象关系。JMM的抽象示意图如图所示：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从图中可以看出： 1. 所有的共享变量都存在主内存中。 2. 每个线程都保存了一份该线程使用到的共享变量的副本。 3. 如果线程A与线程B之间要通信的话，必须经历下面2个步骤： 1. 线程A将本地内存A中更新过的共享变量刷新到主内存中去。 2. 线程B到主内存中去读取线程A之前已经更新过的共享变量。</p><p><strong>所以，线程A无法直接访问线程B的工作内存，线程间通信必须经过主内存。</strong></p><p>注意，根据JMM的规定，<strong>线程对共享变量的所有操作都必须在自己的本地内存中进行，不能直接从主内存中读取</strong>。</p><p>所以线程B并不是直接去主内存中读取共享变量的值，而是先在本地内存B中找到这个共享变量，发现这个共享变量已经被更新了，然后本地内存B去主内存中读取这个共享变量的新值，并拷贝到本地内存B中，最后线程B再读取本地内存B中的新值。</p><p>那么怎么知道这个共享变量的被其他线程更新了呢？这就是JMM的功劳了，也是JMM存在的必要性之一。<strong>JMM通过控制主内存与每个线程的本地内存之间的交互，来提供内存可见性保证</strong>。</p><blockquote><p>Java中的volatile关键字可以保证多线程操作共享变量的可见性以及禁止指令重排序，synchronized关键字不仅保证可见性，同时也保证了原子性（互斥性）。在更底层，JMM通过内存屏障来实现内存的可见性以及禁止重排序。为了程序员的方便理解，提出了happens-before，它更加的简单易懂，从而避免了程序员为了理解内存可见性而去学习复杂的重排序规则以及这些规则的具体实现方法。这里涉及到的所有内容后面都会有专门的章节介绍。</p></blockquote><h3 id="_6-2-3-jmm与java内存区域划分的区别与联系" tabindex="-1"><a class="header-anchor" href="#_6-2-3-jmm与java内存区域划分的区别与联系"><span>6.2.3 JMM与Java内存区域划分的区别与联系</span></a></h3><p>上面两小节分别提到了JMM和Java运行时内存区域的划分，这两者既有差别又有联系：</p><ul><li><p>区别</p><p>两者是不同的概念层次。JMM是抽象的，他是用来描述一组规则，通过这个规则来控制各个变量的访问方式，围绕原子性、有序性、可见性等展开的。而Java运行时内存的划分是具体的，是JVM运行Java程序时，必要的内存划分。</p></li><li><p>联系</p><p>都存在私有数据区域和共享数据区域。一般来说，JMM中的主内存属于共享数据区域，他是包含了堆和方法区；同样，JMM中的本地内存属于私有数据区域，包含了程序计数器、本地方法栈、虚拟机栈。</p></li></ul><p><strong>实际上，他们表达的是同一种含义，这里不做区分。</strong></p><p><strong>参考资料</strong></p><ul><li>《Java并发编程的艺术》</li><li>《实战Java高并发程序设计》</li></ul>',30),s=[r];function c(h,d){return e(),t("div",null,s)}const m=a(p,[["render",c],["__file","06-Java内存模型基础知识.html.vue"]]),v=JSON.parse('{"path":"/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAJava%E5%A4%9A%E7%BA%BF%E7%A8%8B/06-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","title":"Java内存模型基础知识","lang":"zh-CN","frontmatter":{"title":"Java内存模型基础知识","date":"2020-12-06T00:00:00.000Z","category":"深入浅出Java多线程","order":6,"description":"6.1 并发编程模型的两个关键问题 线程间如何通信？即：线程之间以何种机制来交换信息 线程间如何同步？即：线程以何种机制来控制不同线程间操作发生的相对顺序 有两种并发模型可以解决这两个问题： 消息传递并发模型 共享内存并发模型 这两种模型之间的区别如下表所示： 在Java中，使用的是共享内存并发模型。 6.2 Java内存模型的抽象结构 6.2.1 运...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAJava%E5%A4%9A%E7%BA%BF%E7%A8%8B/06-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"Java内存模型基础知识"}],["meta",{"property":"og:description","content":"6.1 并发编程模型的两个关键问题 线程间如何通信？即：线程之间以何种机制来交换信息 线程间如何同步？即：线程以何种机制来控制不同线程间操作发生的相对顺序 有两种并发模型可以解决这两个问题： 消息传递并发模型 共享内存并发模型 这两种模型之间的区别如下表所示： 在Java中，使用的是共享内存并发模型。 6.2 Java内存模型的抽象结构 6.2.1 运..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2020-12-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java内存模型基础知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"6.1 并发编程模型的两个关键问题","slug":"_6-1-并发编程模型的两个关键问题","link":"#_6-1-并发编程模型的两个关键问题","children":[]},{"level":2,"title":"6.2 Java内存模型的抽象结构","slug":"_6-2-java内存模型的抽象结构","link":"#_6-2-java内存模型的抽象结构","children":[{"level":3,"title":"6.2.1  运行时内存的划分","slug":"_6-2-1-运行时内存的划分","link":"#_6-2-1-运行时内存的划分","children":[]},{"level":3,"title":"6.2.2 既然堆是共享的，为什么在堆中会有内存不可见问题？","slug":"_6-2-2-既然堆是共享的-为什么在堆中会有内存不可见问题","link":"#_6-2-2-既然堆是共享的-为什么在堆中会有内存不可见问题","children":[]},{"level":3,"title":"6.2.3 JMM与Java内存区域划分的区别与联系","slug":"_6-2-3-jmm与java内存区域划分的区别与联系","link":"#_6-2-3-jmm与java内存区域划分的区别与联系","children":[]}]}],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":4.48,"words":1343},"filePathRelative":"深入浅出Java多线程/06-Java内存模型基础知识.md","localizedDate":"2020年12月6日","excerpt":"<h2>6.1 并发编程模型的两个关键问题</h2>\\n<ul>\\n<li>线程间如何通信？即：线程之间以何种机制来交换信息</li>\\n<li>线程间如何同步？即：线程以何种机制来控制不同线程间操作发生的相对顺序</li>\\n</ul>\\n<p>有两种并发模型可以解决这两个问题：</p>\\n<ul>\\n<li>消息传递并发模型</li>\\n<li>共享内存并发模型</li>\\n</ul>\\n<p>这两种模型之间的区别如下表所示：\\n</p>\\n<p><strong>在Java中，使用的是共享内存并发模型</strong>。</p>\\n<h2>6.2 Java内存模型的抽象结构</h2>\\n<h3>6.2.1  运行时内存的划分</h3>","autoDesc":true}');export{m as comp,v as data};
