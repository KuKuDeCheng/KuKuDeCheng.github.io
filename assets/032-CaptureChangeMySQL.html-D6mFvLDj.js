import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c,b as a,d as e,e as r,w as i,a as p,o as s}from"./app-DPxQZnZ9.js";const d="/assets/1-BLjw39pX.png",l="/assets/2-B0aUCTKj.png",h="/assets/3-YN9QY5nS.png",m="/assets/4-Czd_ZUDh.png",g="/assets/5-C8uK1KHe.png",u={},y=a("code",null,"CaptureChangeMySQL",-1),b=p('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>从MySQL数据库中捕获变更数据的CDC事件。 CDC事件包括 <code>INSERT、UPDATE、DELETE</code>操作。事件作为单独的流文件输出，按操作发生的时间排序。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>以下挑选主要的几个配置进行说明讲解(用户名 密码 驱动等等啥的就不说了)。</p><h3 id="mysql-hosts" tabindex="-1"><a class="header-anchor" href="#mysql-hosts"><span>MySQL Hosts</span></a></h3><p>必填项，与<code>MySQL集群</code>中的节点对应的主机名/端口条目<code>列表</code>(例如host1:port,host2:port,....)。该处理器将尝试按顺序连接到列表中的主机。如果一个节点出现故障并为集群启用了故障转移，则处理器将连接到其他活动节点。</p><p>很简单，就是配置数据库地址的。</p><h3 id="server-id" tabindex="-1"><a class="header-anchor" href="#server-id"><span>Server ID</span></a></h3><p>非必填项(<code>但真的要填啊！</code>)，连接到MySQL复制组的客户端实际上是一个简化的副本（服务器），此处的Server ID在整个复制组中必须是唯一的（即不同于任何主服务器或副本使用的任何其他Server ID）。因此，CaptureChangeMySQL的<code>每个实例</code>在整个复制组中都必须具有唯一的服务器ID。如果未指定服务器ID，则默认为65535。</p><p>总而言之，言而总之，就是要 <code>唯一</code>、<code>唯一</code>、还是<code>唯一</code>。（我习惯直接使用当前的Long型的时间戳填进去。）并且是合格的long值，因为代码里对这个配置进行了Long值校验。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那我不唯一能咋地？能咋地？(这里就是贱贱的反问，不是打错字)</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还能咋地，报错呗。</p><h3 id="database-schema-name-pattern" tabindex="-1"><a class="header-anchor" href="#database-schema-name-pattern"><span>Database/Schema Name Pattern</span></a></h3><p>非必填项(<code>但一般要填啊！不然事件太多了啊 ==！</code>)，一个正则表达式（regex），用于根据CDC事件列表匹配数据库（或schema，具体取决于RDBMS的术语）。 正则表达式必须与存储在RDBMS中的数据库名称匹配。如果未设置此属性，则数据库名称将不会用于筛选CDC事件。NOTE: DDL事件，即使它们影响不同的数据库，也与用来执行DDL的数据库会话相关联。这意味着，如果连接到一个数据库，但DDL针对另一个数据库发出，则连接的数据库将是与指定模式匹配的数据库。</p><p>从库名(schema名称)来过滤事件，其实从Java定义的api角度看MySQL这里应该叫catalog。</p><blockquote><p>简单来说，Java定义了一系列的接口定义，各个数据库厂商按照规范去实现，来提高一个驱动。比如说其中有一个查询主键的接口定义<code>databaseMetaData.getPrimaryKeys(catalogName, schemaName, tableName)</code>， 对于MySQL来说库名称是对应catalogName的。再比如说Oracle，就是对应schemaName的。</p></blockquote><p>然后他Note我们(虽然翻译的比较别扭，其实大家应该都能看懂，但我这边再啰嗦啰嗦)，说假如哈，你连接的是一个databaseName叫A的数据库，然后你修改了一个databaseName叫B的数据库里的表(<code>alter table b.test ..... </code>)，但这个DDL事件是挂载A的名下的。而假如你用这个配置，只要A库的事件，那不幸的是，刚刚上面说的修改<code>b.test</code>的DDL事件也是合法的。</p><p>阿诚啊！这里有个问题啊。在描述里不是说只有DML的三种事件嘛，这里怎么又冒出来DDL事件了呢？</p><p>答案你可能想不到！真相只有一个！NIFI关于CaptureChangeMySQL组件功能描述没写全！！ 惊不惊喜？意不意外？</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>什么？正则表达式怎么写？？</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我也记不住，复杂点的也是查教程，然后试着试着就写出来了。</p><h3 id="table-name-pattern" tabindex="-1"><a class="header-anchor" href="#table-name-pattern"><span>Table Name Pattern</span></a></h3><p>非必填项(<code>但一般要填啊！不然事件太多了啊 ==！</code>)，上面已经说了Database/Schema Name Pattern，这个就不多说了吧。</p><h3 id="distributed-map-cache-client" tabindex="-1"><a class="header-anchor" href="#distributed-map-cache-client"><span>Distributed Map Cache Client</span></a></h3><p>非必填项(<code>但真的要填啊！</code>)</p><p>标识用于保存处理器所需的各种<code>表</code>、<code>列</code>等信息的分布式映射缓存客户端控制器服务。如果未指定，则生成的事件将<code>不包括列类型或名称信息</code>。</p><p>第一，这个配置叫分布式缓存<code>客户端</code>(那肯定对应有<code>服务端</code>的)，第二，如果你不配置这个东西，生成的事件就<code>不包括列类型或名称信息</code>，那你就看不懂这个事件。</p><p>说白了这个就是让你提供一个Map(存东西的地方)，key是tableId，value是关于这张表的元数据信息。而tableId呢，就是个数字，</p>',33);function C(f,D){const t=n("RouteLink");return s(),c("div",null,[a("p",null,[e("在"),r(t,{to:"/ApacheNIFI%E6%95%99%E7%A8%8B/004-%E6%95%B0%E6%8D%AE%E6%8A%BD%E5%8F%96%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.html"},{default:i(()=>[e("数据抽取的常见理论方法")]),_:1}),e("一文中，我们历数了各种的数据抽取的方式，其中基于查询式的抽取方式侵入性最小，但往往无法满足我们的需求，触发器的方式就不说了(嗯，有可能你一说用触发器，领导们脸色就变了，其实在少量的同步数据抽取采集我感觉反而触发器性价比基于日志的会更高)，最后就是基于日志的。基于日志的数据采集我开发和研究过MySQL的binlog日志和Oracle的redo日志，这篇文章就一起研究一下NIFI中的基于binlog日志的MySQL实时采集组件"),y,e("。")]),b])}const _=o(u,[["render",C],["__file","032-CaptureChangeMySQL.html.vue"]]),E=JSON.parse('{"path":"/ApacheNIFI%E6%95%99%E7%A8%8B/032-CaptureChangeMySQL.html","title":"CaptureChangeMySQL","lang":"zh-CN","frontmatter":{"title":"CaptureChangeMySQL","date":"2021-08-13T00:00:00.000Z","category":"ApacheNIFI教程","tag":"NIFI","author":"张诚","order":32,"description":"在一文中，我们历数了各种的数据抽取的方式，其中基于查询式的抽取方式侵入性最小，但往往无法满足我们的需求，触发器的方式就不说了(嗯，有可能你一说用触发器，领导们脸色就变了，其实在少量的同步数据抽取采集我感觉反而触发器性价比基于日志的会更高)，最后就是基于日志的。基于日志的数据采集我开发和研究过MySQL的binlog日志和Oracle的redo日志，这篇...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/ApacheNIFI%E6%95%99%E7%A8%8B/032-CaptureChangeMySQL.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"CaptureChangeMySQL"}],["meta",{"property":"og:description","content":"在一文中，我们历数了各种的数据抽取的方式，其中基于查询式的抽取方式侵入性最小，但往往无法满足我们的需求，触发器的方式就不说了(嗯，有可能你一说用触发器，领导们脸色就变了，其实在少量的同步数据抽取采集我感觉反而触发器性价比基于日志的会更高)，最后就是基于日志的。基于日志的数据采集我开发和研究过MySQL的binlog日志和Oracle的redo日志，这篇..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"张诚"}],["meta",{"property":"article:tag","content":"NIFI"}],["meta",{"property":"article:published_time","content":"2021-08-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CaptureChangeMySQL\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张诚\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[{"level":3,"title":"MySQL Hosts","slug":"mysql-hosts","link":"#mysql-hosts","children":[]},{"level":3,"title":"Server ID","slug":"server-id","link":"#server-id","children":[]},{"level":3,"title":"Database/Schema Name Pattern","slug":"database-schema-name-pattern","link":"#database-schema-name-pattern","children":[]},{"level":3,"title":"Table Name Pattern","slug":"table-name-pattern","link":"#table-name-pattern","children":[]},{"level":3,"title":"Distributed Map Cache Client","slug":"distributed-map-cache-client","link":"#distributed-map-cache-client","children":[]}]}],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":4.52,"words":1357},"filePathRelative":"ApacheNIFI教程/032-CaptureChangeMySQL.md","localizedDate":"2021年8月13日","excerpt":"<p>在<a href=\\"/ApacheNIFI%E6%95%99%E7%A8%8B/004-%E6%95%B0%E6%8D%AE%E6%8A%BD%E5%8F%96%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.html\\" target=\\"_blank\\">数据抽取的常见理论方法</a>一文中，我们历数了各种的数据抽取的方式，其中基于查询式的抽取方式侵入性最小，但往往无法满足我们的需求，触发器的方式就不说了(嗯，有可能你一说用触发器，领导们脸色就变了，其实在少量的同步数据抽取采集我感觉反而触发器性价比基于日志的会更高)，最后就是基于日志的。基于日志的数据采集我开发和研究过MySQL的binlog日志和Oracle的redo日志，这篇文章就一起研究一下NIFI中的基于binlog日志的MySQL实时采集组件<code>CaptureChangeMySQL</code>。</p>","autoDesc":true}');export{_ as comp,E as data};
