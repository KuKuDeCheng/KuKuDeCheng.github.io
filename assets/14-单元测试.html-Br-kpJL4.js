import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as e,a as n}from"./app-C3hOzZo_.js";const l={},a=n('<ol><li>【强制】好的单元测试必须遵守 AIR 原则。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p><ul><li>A：Automatic（自动化）</li><li>I：Independent（独立性）</li><li>R：Repeatable（可重复）</li></ul><ol start="2"><li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li><li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</li></ol><div class="hint-container caution"><p class="hint-container-title">反例</p><p>method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</p></div></div><ol start="4"><li>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><p>为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI框架注入一个本地（内存）实现或者 Mock 实现。</p></div><ol start="5"><li>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</p></div><ol start="6"><li>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p></div><ol start="7"><li>【强制】单元测试代码必须写在如下工程目录：<code>src/test/java</code>，不允许写在业务代码目录下。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。</p></div><ol start="8"><li>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元测试。 9. 【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。</p><ul><li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li><li>C：Correct，正确的输入，并得到预期的结果。</li><li>D：Design，与设计文档相结合，来编写单元测试。</li><li>E：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。</li></ul><ol start="10"><li>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。</li></ol><div class="hint-container caution"><p class="hint-container-title">反例</p><p>删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。</p></div></div><ol start="11"><li>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p>在阿里巴巴企业智能事业部的内部单元测试中，使用 <code>ENTERPRISE_INTELLIGENCE</code> <code>_UNIT_TEST_</code>的前缀来标识单元测试相关代码。</p></div><ol start="12"><li>【推荐】对于不可测的代码在适当的时机做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</li><li>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。</li><li>【推荐】单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补充单元测试用例。</li><li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：</li></ol><ul><li>构造方法中做的事情过多。</li><li>存在过多的全局变量和静态方法。</li><li>存在过多的外部依赖。</li><li>存在过多的条件语句。</li></ul><div class="hint-container warning"><p class="hint-container-title">说明</p><p>多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</p></div><ol start="16"><li>【参考】不要对单元测试存在如下误解：</li></ol><ul><li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li><li>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。</li><li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li><li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li></ul>',20),o=[a];function c(r,p){return e(),i("div",null,o)}const h=t(l,[["render",c],["__file","14-单元测试.html.vue"]]),m=JSON.parse('{"path":"/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/14-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","title":"单元测试","lang":"zh-CN","frontmatter":{"title":"单元测试","date":"2021-02-14T00:00:00.000Z","category":"阿里Java开发手册","order":14,"description":"【强制】好的单元测试必须遵守 AIR 原则。 说明 单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。 A：Automatic（自动化） I：Independent（独立性） R：Repeatable（可重复） 【强制】单元测试应该是全自动执行的，...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/14-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"单元测试"}],["meta",{"property":"og:description","content":"【强制】好的单元测试必须遵守 AIR 原则。 说明 单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。 A：Automatic（自动化） I：Independent（独立性） R：Repeatable（可重复） 【强制】单元测试应该是全自动执行的，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2021-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单元测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":4.96,"words":1489},"filePathRelative":"阿里Java开发手册/14-单元测试.md","localizedDate":"2021年2月14日","excerpt":"<ol>\\n<li>【强制】好的单元测试必须遵守 AIR 原则。</li>\\n</ol>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">说明</p>\\n<p>单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p>\\n<ul>\\n<li>A：Automatic（自动化）</li>\\n<li>I：Independent（独立性）</li>\\n<li>R：Repeatable（可重复）</li>\\n</ul>\\n<ol start=\\"2\\">\\n<li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li>\\n<li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</li>\\n</ol>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">反例</p>\\n<p>method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</p>\\n</div>\\n</div>","autoDesc":true}');export{h as comp,m as data};
