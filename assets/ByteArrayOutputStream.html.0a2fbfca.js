import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{d as s}from"./app.41ad601a.js";const a={},t=s(`<h2 id="\u4EC0\u4E48\u662Fjava-bytearrayoutputstream" tabindex="-1"><a class="header-anchor" href="#\u4EC0\u4E48\u662Fjava-bytearrayoutputstream" aria-hidden="true">#</a> \u4EC0\u4E48\u662FJava ByteArrayOutputStream</h2><p>ByteArrayOutputStream \u5BF9byte\u7C7B\u578B\u6570\u636E\u8FDB\u884C\u5199\u5165\u7684\u7C7B \u76F8\u5F53\u4E8E\u4E00\u4E2A\u4E2D\u95F4\u7F13\u51B2\u5C42\uFF0C\u5C06\u7C7B\u5199\u5165\u5230\u6587\u4EF6\u7B49\u5176\u4ED6outputStream\u3002\u5B83\u662F\u5BF9\u5B57\u8282\u8FDB\u884C\u64CD\u4F5C\uFF0C\u5C5E\u4E8E\u5185\u5B58\u64CD\u4F5C\u6D41</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayOutputStream</span> <span class="token keyword">extends</span> <span class="token class-name">OutputStream</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6210\u5458\u548C\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6210\u5458\u548C\u65B9\u6CD5" aria-hidden="true">#</a> \u6210\u5458\u548C\u65B9\u6CD5</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//\u6570\u636E\u5B58\u50A8\u7684\u5730\u65B9</span>
<span class="token keyword">protected</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
<span class="token comment">//\u8BA1\u6570\u5668  \u8868\u793A\u6570\u636E\u7684\u4E2A\u6570</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ByteArrayOutputStream\u7684\u6784\u9020\u65B9\u6CD5\u6709\u4E24\u4E2A\uFF1B</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684 byte \u6570\u7EC4\u8F93\u51FA\u6D41\u3002\u7F13\u51B2\u533A\u7684\u5BB9\u91CF\u6700\u521D\u662F 32 \u5B57\u8282\uFF0C\u5982\u6709\u5FC5\u8981\u53EF\u589E\u52A0\u5176\u5927\u5C0F</span>
<span class="token keyword">public</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684 byte \u6570\u7EC4\u8F93\u51FA\u6D41\uFF0C\u5B83\u5177\u6709\u6307\u5B9A\u5927\u5C0F\u7684\u7F13\u51B2\u533A\u5BB9\u91CF\uFF08\u4EE5\u5B57\u8282\u4E3A\u5355\u4F4D\uFF09</span>
<span class="token keyword">public</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Negative initial size: &quot;</span>
                                            <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ByteArrayOutputStream\u4E2D\u6709write()\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//\u5C06\u6307\u5B9A\u7684int\u7C7B\u578B\u7684\u6570\u636E\u5199\u5165\u6B64 byte \u6570\u7EC4\u8F93\u51FA\u6D41</span>
<span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buf<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> b<span class="token punctuation">;</span>
        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token doc-comment comment">/**\u5C06\u6307\u5B9A byte \u6570\u7EC4\u4E2D\u4ECE\u504F\u79FB\u91CF 
    off \u5F00\u59CB\u7684 
    len \u4E2A\u5B57\u8282\u5199\u5165\u6B64 byte \u6570\u7EC4\u8F93\u51FA\u6D41\u3002*/</span>
<span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>off <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>off <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>off <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5176\u4ED6\u65B9\u6CD5</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\u5C06\u6B64 byte \u6570\u7EC4\u8F93\u51FA\u6D41\u7684\u5168\u90E8\u5185\u5BB9\u5199\u5165\u5230\u6307\u5B9A\u7684\u8F93\u51FA\u6D41\u53C2\u6570\u4E2D\uFF0C
\u8FD9\u4E0E\u4F7F\u7528out.write(buf, 0, count) \u8C03\u7528\u8BE5\u8F93\u51FA\u6D41\u7684 write \u65B9\u6CD5\u6548\u679C\u4E00\u6837*/</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">writeTo</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\u5C06\u6B64 byte \u6570\u7EC4\u8F93\u51FA\u6D41\u7684 
    count \u5B57\u6BB5\u91CD\u7F6E\u4E3A\u96F6\uFF0C\u4ECE\u800C\u4E22\u5F03\u8F93\u51FA\u6D41\u4E2D\u76EE\u524D\u5DF2\u7D2F\u79EF\u7684\u6240\u6709\u8F93\u51FA\u3002\u901A\u8FC7\u91CD\u65B0\u4F7F\u7528\u5DF2\u5206\u914D\u7684\u7F13\u51B2\u533A\u7A7A\u95F4\uFF0C
    \u53EF\u4EE5\u518D\u6B21\u4F7F\u7528\u8BE5\u8F93\u51FA\u6D41*/</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//\u521B\u5EFA\u4E00\u4E2A\u65B0\u5206\u914D\u7684 byte \u6570\u7EC4\u3002\u5176\u5927\u5C0F\u662F\u6B64\u8F93\u51FA\u6D41\u7684\u5F53\u524D\u5927\u5C0F\uFF0C\u5E76\u4E14\u7F13\u51B2\u533A\u7684\u6709\u6548\u5185\u5BB9\u5DF2\u590D\u5236\u5230\u8BE5\u6570\u7EC4\u4E2D\u3002</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">byte</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6269\u5BB9\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u6269\u5BB9\u65B9\u5F0F" aria-hidden="true">#</a> \u6269\u5BB9\u65B9\u5F0F</h2><p>ByteArrayOutputStream\u662Fbyte\u7C7B\u578B\u7684\u5C5E\u732A\u8FDB\u884C\u81EA\u52A8\u6269\u5BB9\u7684\u3002\u5F53\u5199\u5165\u957F\u5EA6\u5927\u4E8E\u6570\u7EC4\u539F\u6709\u957F\u5EA6\u65F6\uFF0C\u5C31\u4F1A\u81EA\u52A8\u8C03\u7528grow()\u65B9\u6CD5, buf\u6570\u7EC4\u662F\u52A8\u6001\u589E\u957F\u7684 \u5148\u6269\u5BB9\u4E3A2\u500D\uFF0C\u5982\u679Csize\u8FD8\u662F\u4E0D\u591F \u5C31\u8BA9\u6570\u7EC4f\u7684sieze\u7B49\u4E8EminCapacity</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//\u6269\u5BB9\u65B9\u6CD5\uFF1A</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// overflow-conscious code</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> buf<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//grow\u65B9\u6CD5\uFF1A</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// overflow-conscious code</span>
    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function e(p,o){return t}var l=n(a,[["render",e],["__file","ByteArrayOutputStream.html.vue"]]);export{l as default};
