import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,c as h,f as r,b as i,d as s,e,w as n,a as p,o as k}from"./app-DPxQZnZ9.js";const d={},o=i("p",null,"今天只是扯扯淡，顺便记录一下我突然想到的一个low疑问。",-1),c=i("h2",{id:"有趣的对话",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#有趣的对话"},[i("span",null,"有趣的对话")])],-1),B=i("p",null,"今天又某同事兴奋地跟我说，他的组件设置了100个并发。",-1),g=i("p",null,"我问他：“服务器什么配置，这么牛逼，能开到100个并发”",-1),E=i("p",null,"某：“没看”",-1),y=i("p",null,"我：“... 几核？”",-1),F=i("p",null,"某：“8核的吧”",-1),C=i("p",null,"我：“8核的。。。。就算这台服务器只跑了NIFI，那么NIFI的线程池数最多也就配置到32，刨去NIFI的主线程、守护线程不计，最多同一时刻也就一共16个线程在CPU里，并发开到100有啥意义？而且它开到100了，其他组件很容易拿不到资源的啊”",-1),A=i("p",null,"某：“这。。。32咋算的”",-1),v=i("p",null,"我：“一核最多2个线程，8核是16个，再来16个等待的，就是32了。”",-1),u=i("p",null,"。。。",-1),m=i("p",null,"所有官方推荐配置线程数为 核数 乘以 2到4倍",-1),b=p(`<h2 id="疑问" tabindex="-1"><a class="header-anchor" href="#疑问"><span>疑问</span></a></h2><p>然后不知怎的，我突然想到一个好玩的问题：</p><p>说一个Processor可以设置并发数，调度的时候是分配一个线程去执行任务，那么Controller Service呢？还有我们知道，Controller Service是可以多个组件公用的，Controller Service在哪里？怎么被调用的？Controller Service需要分配线程去执行嘛？</p><p>其实很简单的，没有那么复杂。</p><p>首先十分明确的一点是：Controller Service是无法设置并发数的，Controller Service是被调用的。</p><p>然后我们重点看一下Controller Service存到了哪里</p><p>create一个Controller Service的时候会调用StandardFlowManager.java的createControllerService</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ControllerServiceNode</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createControllerService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BundleCoordinate</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> bundleCoordinate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> additionalUrls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> firstTimeAdded</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> registerLogObserver) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ControllerServiceProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> controllerServiceProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> flowController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getControllerServiceProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ControllerServiceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> serviceNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ExtensionBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">bundleCoordinate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bundleCoordinate)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">controllerServiceProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">flowController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getControllerServiceProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">processScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(processScheduler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nodeTypeProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(flowController)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">validationTrigger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">flowController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getValidationTrigger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">reloadComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">flowController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getReloadComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">variableRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">flowController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getVariableRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addClasspathUrls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(additionalUrls)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">kerberosConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">flowController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createKerberosConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(nifiProperties))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stateManagerProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">flowController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getStateManagerProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">extensionManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(extensionManager)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">buildControllerService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        controllerServiceProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">onControllerServiceAdded</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(serviceNode);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> serviceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> ControllerServiceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> serviceCache </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onControllerServiceAdded</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ControllerServiceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> serviceNode) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        serviceCache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">putIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">serviceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(), serviceNode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到没，Controller Service就是存到了一个Map里，任意一个线程执行Processor调度时，谁要用谁就去Map了查一下然后调用就行了。</p><p>所以说如果一个Processor支持并发，那么这个Processor用的Controller Service那得是线程安全的。</p>`,11),D=i("blockquote",null,[i("p",null,"Controller Services是守护进程(daemons)。它们在后台运行，并提供配置，资源和参数供处理器执行。")],-1),_=i("p",null,"我们可以回顾一下daemon是什么意思",-1),f=i("blockquote",null,[i("p",null,"在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) 用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆.只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。User和Daemon两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，虚拟机也就退出了。 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。")],-1),S=i("p",null,"我们在Controller Service里用的最多的可能就是数据库连接池服务了吧，而数据库连接池本身就也包含着很多守护线程，监控连接个数、超时时间、状态等等。",-1),I=i("p",null,"如果Controller Service里有后台运行的线程，那么它(们)应该是守护线程(否则JVM怎么退出)(咱们这里不排除因为Processor等组件调用Controller Service而产生一些非守护线程，但如果有，那么这些非守护线程一定是会随着调度前后而退出的)。",-1),N=i("p",null,"到这里我们知道运行的NIFI里还有很多我们不易计数的守护线程，所以回到最开始的NIFI配置线程池线程数的问题，如果是8核服务器我们配置了8或者16，及时服务器只运行的NIFI，我们也千万不能天真的认为线程池里这8或者16个就可以肆意的遨游在CPU里了。",-1);function P(T,w){const a=t("RouteLink");return k(),h("div",null,[o,c,B,g,E,r(" more "),y,F,C,A,v,u,m,i("p",null,[s("相关文章："),e(a,{to:"/ApacheNIFI%E6%95%99%E7%A8%8B/012-%E7%90%86%E8%A7%A3maxThread%E8%AE%BE%E7%BD%AE.html"},{default:n(()=>[s("了解Apache NiFi最大线程池和处理器并发任务设置")]),_:1}),s(),e(a,{to:"/ApacheNIFI%E6%95%99%E7%A8%8B/016-NIFI%E8%B0%83%E5%BA%A6.html"},{default:n(()=>[s("深入解析Apache NIFI的调度策略")]),_:1})]),b,i("p",null,[s("然后先前在"),e(a,{to:"/ApacheNIFI%E6%95%99%E7%A8%8B/003-NIFI%E5%85%A5%E9%97%A8.html"},{default:n(()=>[s("Apache NIFI入门(读完即入门)")]),_:1}),s("一文中我们说过")]),D,_,f,S,I,N])}const V=l(d,[["render",P],["__file","015-Controller Services是守护进程.html.vue"]]),U=JSON.parse('{"path":"/ApacheNIFI%E6%95%99%E7%A8%8B/015-Controller%20Services%E6%98%AF%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.html","title":"Controller Services是守护进程","lang":"zh-CN","frontmatter":{"title":"Controller Services是守护进程","date":"2020-06-30T00:00:00.000Z","category":"ApacheNIFI教程","tag":"NIFI","order":15,"description":"今天只是扯扯淡，顺便记录一下我突然想到的一个low疑问。 有趣的对话 今天又某同事兴奋地跟我说，他的组件设置了100个并发。 我问他：“服务器什么配置，这么牛逼，能开到100个并发” 某：“没看”","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/ApacheNIFI%E6%95%99%E7%A8%8B/015-Controller%20Services%E6%98%AF%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"Controller Services是守护进程"}],["meta",{"property":"og:description","content":"今天只是扯扯淡，顺便记录一下我突然想到的一个low疑问。 有趣的对话 今天又某同事兴奋地跟我说，他的组件设置了100个并发。 我问他：“服务器什么配置，这么牛逼，能开到100个并发” 某：“没看”"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:tag","content":"NIFI"}],["meta",{"property":"article:published_time","content":"2020-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Controller Services是守护进程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"有趣的对话","slug":"有趣的对话","link":"#有趣的对话","children":[]},{"level":2,"title":"疑问","slug":"疑问","link":"#疑问","children":[]}],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":3.97,"words":1192},"filePathRelative":"ApacheNIFI教程/015-Controller Services是守护进程.md","localizedDate":"2020年6月30日","excerpt":"<p>今天只是扯扯淡，顺便记录一下我突然想到的一个low疑问。</p>\\n<h2>有趣的对话</h2>\\n<p>今天又某同事兴奋地跟我说，他的组件设置了100个并发。</p>\\n<p>我问他：“服务器什么配置，这么牛逼，能开到100个并发”</p>\\n<p>某：“没看”</p>\\n","autoDesc":true}');export{V as comp,U as data};
