import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as l,a}from"./app-BuJj135v.js";const n={},t=a(`<ol><li>【强制】代码中的命名均不能以 <strong>下划线或美元符号</strong> 开始，也不能以 <strong>下划线或美元符号</strong> 结束。</li></ol><div class="hint-container caution"><p class="hint-container-title">反例</p><ul><li>_name</li><li>__name</li><li>$name</li><li>name_</li><li>name$</li><li>name__</li></ul></div><ol start="2"><li>【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><p>国际通用的名称，可视同英文。</p><ul><li>ali</li><li>alibaba</li><li>taobao</li><li>cainiao</li><li>aliyun</li><li>youku</li><li>hangzhou</li></ul></div><div class="hint-container caution"><p class="hint-container-title">反例</p><ul><li>DaZhePromotion[打折]</li><li>getPingfenByName()[评分]</li><li>int 某变量 =3</li></ul></div><ol start="3"><li>【强制】类名使用UpperCamelCase风格，但以下情形例外：<code>DO/BO/DTO/VO/AO/PO/UID</code>等。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><ul><li>ForceCode</li><li>UserDO</li><li>HtmlDTO</li><li>XmlService</li><li>TcpUdpDeal</li><li>TaPromotion</li></ul></div><div class="hint-container caution"><p class="hint-container-title">反例</p><ul><li>forcecode</li><li>UserDo</li><li>HTMLDto</li><li>XMLService</li><li>TCPUDPDeal</li><li>TAPromotion</li></ul></div><ol start="4"><li>【强制】方法名、参数名、成员变量、局部变量都统一使用<code>lowerCamelCase</code>风格。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><ul><li>localValue</li><li>getHttpMessage()</li><li>inputUserId</li></ul></div><ol start="5"><li>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><ul><li>MAX_STOCK_COUNT</li><li>CACHE_EXPIRED_TIME</li></ul></div><div class="hint-container caution"><p class="hint-container-title">反例</p><ul><li>MAX_COUNT</li><li>EXPIRED_TIME</li></ul></div><ol start="6"><li>【强制】抽象类命名使用Abstract或Base开头；异常类命名使用<code>Exception</code>结尾；测试类命名以它要测试的类的名称开始，以Test结尾。</li><li>【强制】类型与中括号紧挨相连来表示数组。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p>定义整形数组<code>int[] arrayDemo</code>;</p></div><div class="hint-container caution"><p class="hint-container-title">反例</p><p>在main参数中，使用<code>String args[]</code>来定义。</p></div><ol start="8"><li>【强制】<code>POJO</code>类中的任何布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>在本文MySQL规约中的建表约定第一条，表达<strong>是与否</strong>的值采用<code>is_xxx</code>的命名方式，所以，需要在<code>&lt;resultMap&gt;</code>设置从<code>is_xxx</code>到<code>xxx</code>的映射关系。</p></div><div class="hint-container caution"><p class="hint-container-title">反例</p><p>定义为基本数据类型<code>Boolean isDeleted</code>的属性，它的方法也是<code>isDeleted()</code>，框架在反向解析的时候，“误以为”对应的属性名称是<code>deleted</code>，导致属性获取不到，进而抛出异常。</p></div><ol start="9"><li>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p>应用工具类包名为<code>com.alibaba.ei.kunlun.aap.util</code>类名为<code>MessageUtils</code>（此规则参考<code>spring</code>的框架结构）</p></div><ol start="10"><li>【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>子类、父类成员变量名相同，即使是public类型的变量也是能够通过编译，而局部变量在同一方法内的不同代码块中同名也是合法的，但是要避免使用。对于非<code>setter/getter</code>的参数名称也要避免与成员变量名称相同。</p></div><div class="hint-container caution"><p class="hint-container-title">反例</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ConfusingName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> intstock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //非setter/getter的参数名称，不允许与本类成员变量同名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> alibaba</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(condition){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">666</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(inti</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            //在同一方法体中，不允许与其它代码块中的money命名相同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">15978</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Son</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ConfusingName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//不允许与父类的成员变量名称相同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> stock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ol start="11"><li>【强制】杜绝完全不规范的缩写，避免望文不知义。</li></ol><div class="hint-container caution"><p class="hint-container-title">反例</p><p><code>AbstractClass</code>缩写命名成<code>AbsClass</code>；<code>condition</code>缩写命名成<code>condi</code>，此类随意缩写严重降低了代码的可阅读性。</p></div><ol start="12"><li>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p>在JDK中，对某个对象引用的<code>volatile</code>字段进行<code>原子更新</code>的类名为：<code>AtomicReferenceFieldUpdater</code>。</p></div><div class="hint-container caution"><p class="hint-container-title">反例</p><p>常见的方法内变量为<code>int a;</code>的定义方式。</p></div><ol start="13"><li>【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><ul><li>startTime</li><li>workQueue</li><li>nameList</li><li>TERMINATED_THREAD_COUNT</li></ul></div><div class="hint-container caution"><p class="hint-container-title">反例</p><ul><li>startedAt</li><li>QueueOfWork</li><li>listName</li><li>COUNT_TERMINATED_THREAD</li></ul></div><ol start="14"><li>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> OrderFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> LoginProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ResourceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ol start="15"><li>【推荐】接口类中的方法和属性不要加任何修饰符号（public也不要加），保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，确定与接口方法相关，并且是整个应用的基础常量。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p>接口方法签名<code>void commit();</code> 接口基础常量<code>String COMPANY=&quot;alibaba&quot;;</code></p></div><div class="hint-container caution"><p class="hint-container-title">反例</p><p>接口方法定义<code>public abstract void f(); </code></p></div><div class="hint-container warning"><p class="hint-container-title">说明</p><p>JDK8中接口允许有默认实现，那么这个<code>default</code>方法，是对所有实现类都有价值的默认实现。</p></div><ol start="16"><li><p>接口和实现类的命名有两套规则：</p><ol><li>【强制】对于<code>Service</code>和<code>DAO</code>类，基于<code>SOA</code>的理念，暴露出来的服务一定是接口，内部的实现类用<code>Impl</code>的后缀与接口区别。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p><code>CacheServiceImpl</code>实现<code>CacheService</code>接口。</p></div><ol start="2"><li>【推荐】如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able的形容词）。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p><code>AbstractTranslator</code>实现<code>Translatable</code>接口。</p></div></li><li><p>【参考】枚举类名带上<code>Enum</code>后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p></li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><p>枚举名字为<code>ProcessStatusEnum</code>的成员名称：</p><ul><li>SUCCESS</li><li>UNKNOWN_REASON</li></ul></div><ol start="18"><li>【参考】各层命名规约： <ul><li><code>Service/DAO</code>层方法命名规约 <ul><li>获取单个对象的方法用<code>get</code>做前缀。</li><li>获取多个对象的方法用<code>list</code>做前缀，复数结尾，如：listObjects。</li><li>获取统计值的方法用<code>count</code>做前缀。</li><li>插入的方法用<code>save/insert</code>做前缀。</li><li>删除的方法用<code>remove/delete</code>做前缀。</li><li>修改的方法用<code>update</code>做前缀。</li></ul></li><li>领域模型命名规约 <ul><li>数据对象：<code>xxxDO</code>，<code>xxx</code>即为数据表名。</li><li>数据传输对象：<code>xxxDTO</code>，<code>xxx</code>为业务领域相关的名称。</li><li>展示对象：<code>xxxVO</code>，<code>xxx</code>一般为网页名称。</li><li><code>POJO</code>是<code>DO/DTO/BO/VO</code>的统称，<code>禁止命名成xxxPOJO</code>。</li></ul></li></ul></li></ol>`,44),e=[t];function c(o,d){return l(),s("div",null,e)}const r=i(n,[["render",c],["__file","01-命名风格.html.vue"]]),k=JSON.parse('{"path":"/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/01-%E5%91%BD%E5%90%8D%E9%A3%8E%E6%A0%BC.html","title":"命名风格","lang":"zh-CN","frontmatter":{"title":"命名风格","date":"2020-12-08T00:00:00.000Z","category":"阿里Java开发手册","order":1,"description":"【强制】代码中的命名均不能以 下划线或美元符号 开始，也不能以 下划线或美元符号 结束。 反例 _name __name $name name_ name$ name__ 【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。 正...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/01-%E5%91%BD%E5%90%8D%E9%A3%8E%E6%A0%BC.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"命名风格"}],["meta",{"property":"og:description","content":"【强制】代码中的命名均不能以 下划线或美元符号 开始，也不能以 下划线或美元符号 结束。 反例 _name __name $name name_ name$ name__ 【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。 正..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2020-12-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"命名风格\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":5.38,"words":1615},"filePathRelative":"阿里Java开发手册/01-命名风格.md","localizedDate":"2020年12月8日","excerpt":"<ol>\\n<li>【强制】代码中的命名均不能以 <strong>下划线或美元符号</strong> 开始，也不能以 <strong>下划线或美元符号</strong> 结束。</li>\\n</ol>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">反例</p>\\n<ul>\\n<li>_name</li>\\n<li>__name</li>\\n<li>$name</li>\\n<li>name_</li>\\n<li>name$</li>\\n<li>name__</li>\\n</ul>\\n</div>\\n<ol start=\\"2\\">\\n<li>【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</li>\\n</ol>","autoDesc":true}');export{r as comp,k as data};
