import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,d as t}from"./app.7e6ca879.js";const e={},p=t(`<p>\u4E3A\u4EC0\u4E48\u5FEB\uFF1F</p><p><code>ResultSet</code>\u662F\u4E00\u4E2A\u63A5\u53E3\uFF0C\u6027\u80FD\u63D0\u5347\u53D6\u51B3\u4E8E\u5B9E\u73B0\u8BE5\u63A5\u53E3\u7684JDBC\u9A71\u52A8\u7A0B\u5E8F</p><p>\u8FD9\u53EA\u662F\u505A\u4E86\u4E00\u4E9B\u6982\u62EC\u6027\u7684\u5F52\u7EB3\uFF0C\u4E0D\u4E00\u5B9A\u9002\u7528\u4E8E\u6240\u6709JDBC\u9A71\u52A8\u7A0B\u5E8F\uFF0C\u884C\u503C\u901A\u5E38\u5C06\u5B58\u50A8\u5728\u6570\u7EC4\u6216\u5217\u8868\u4E2D\uFF0C\u56E0\u4E3A\u8FD9\u662F\u6700\u81EA\u7136\u5730\u4ECE\u6570\u636E\u5E93\u670D\u52A1\u5668\u63A5\u6536\u5E76\u5339\u914D\u6570\u636E\u7684\u65B9\u5F0F\u3002</p><p>\u56E0\u6B64\uFF0C\u6309\u7D22\u5F15\u68C0\u7D22\u503C\u5C06\u662F\u6700\u7B80\u5355\u7684\u3002\u5B83\u53EF\u80FD\u50CF\u8FD9\u6837\u7B80\u5355\uFF08\u5FFD\u7565\u5B9E\u73B0JDBC\u9A71\u52A8\u7A0B\u5E8F\u7684\u4E00\u4E9B\u66F4\u539F\u59CB\u7684\u7EC6\u8282\uFF09\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token function">checkValidRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkValidIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> currentRow<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u5DEE\u4E0D\u591A\u5FEB\u4E86\u3002</p><p>\u53E6\u4E00\u65B9\u9762\uFF0C\u6309\u5217\u540D\u79F0\u67E5\u627E\u5219\u9700\u8981\u66F4\u591A\u5DE5\u4F5C\u3002\u5217\u540D\u9700\u8981\u533A\u5206\u5927\u5C0F\u5199\uFF0C\u65E0\u8BBA\u4F7F\u7528\u5C0F\u5199\u8FD8\u662F\u5927\u5199\u8FDB\u884C\u89C4\u8303\u5316\uFF0C\u8FD8\u662F\u4F7F\u7528<code>TreeMap</code>\u4E0D\u533A\u5206\u5927\u5C0F\u5199\u7684\u67E5\u627E\uFF0C\u90FD\u5C06\u4EA7\u751F\u989D\u5916\u7684\u5F00\u9500\u3002</p><p>\u4E00\u4E2A\u7B80\u5355\u7684\u5B9E\u73B0\u53EF\u80FD\u7C7B\u4F3C\u4E8E\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> columnLabel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token function">getIndexByLabel</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getIndexByLabel</span><span class="token punctuation">(</span><span class="token class-name">String</span> columnLabel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexMap <span class="token operator">=</span> <span class="token function">createOrGetIndexMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> columnIndex <span class="token operator">=</span> indexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>columnIndex <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">&quot;Column label &quot;</span> <span class="token operator">+</span> columnLabel <span class="token operator">+</span> <span class="token string">&quot; does not exist in the result set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> columnIndex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">createOrGetIndexMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ResultSetMetaData</span> rsmd <span class="token operator">=</span> <span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// reverse loop to ensure first occurrence of a column label is retained</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> idx <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> idx<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> label <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap <span class="token operator">=</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53E6\u5916\u9700\u8981\u4F7F\u7528\u6570\u636E\u5E93\u7684API\u548C\u53EF\u7528\u7684\u8BED\u53E5\u5143\u6570\u636E\uFF0C\u53EF\u80FD\u9700\u8981\u5176\u4ED6\u5904\u7406\u624D\u80FD\u786E\u5B9A\u67E5\u8BE2\u7684\u5B9E\u9645\u5217\u6807\u7B7E\u3002\u8FD9\u53EF\u80FD\u4EC5\u5728\u5B9E\u9645\u9700\u8981\u65F6\u624D\u786E\u5B9A\u6210\u672C\uFF08\u5F53\u6309\u540D\u79F0\u8BBF\u95EE\u5217\u6807\u7B7E\u65F6\uFF0C\u6216\u5728\u68C0\u7D22\u7ED3\u679C\u96C6\u5143\u6570\u636E\u65F6\uFF09\u3002\u6362\u53E5\u8BDD\u8BF4\uFF0C<code>createOrGetIndexMap()</code>\u7684\u6210\u672C\u53EF\u80FD\u4F1A\u5F88\u9AD8\u3002 \u5373\u4F7F\u8BE5\u6D88\u8017\u53EF\u4EE5\u5FFD\u7565\u4E0D\u8BA1\uFF08\u4F8B\u5982\uFF0C\u8BED\u53E5\u4ECE\u6570\u636E\u5E93\u670D\u52A1\u5668\u51C6\u5907\u5143\u6570\u636E\u5305\u62EC\u5217\u6807\u7B7E\uFF09\uFF0C\u5C06\u5217\u6807\u7B7E\u6620\u5C04\u5230\u7D22\u5F15\u7136\u540E\u6309\u7D22\u5F15\u68C0\u7D22\u7684\u5F00\u9500\u663E\u7136\u4E5F\u6BD4\u76F4\u63A5\u6309\u7D22\u5F15\u68C0\u7D22\u7684\u5F00\u9500\u9AD8\u3002 \u9A71\u52A8\u7A0B\u5E8F\u751A\u81F3\u6BCF\u6B21\u90FD\u53EF\u4EE5\u904D\u5386\u7ED3\u679C\u96C6\u5143\u6570\u636E\uFF0C\u5E76\u4F7F\u7528\u6807\u7B7E\u5339\u914D\u7684\u7B2C\u4E00\u4E2A\uFF1B\u8FD9\u53EF\u80FD\u6BD4\u4E3A\u5177\u6709\u5C11\u91CF\u5217\u7684\u7ED3\u679C\u96C6\u6784\u5EFA\u548C\u8BBF\u95EE\u54C8\u5E0C\u6620\u5C04\u8981\u4FBF\u5B9C\uFF0C\u4F46\u662F\u6210\u672C\u4ECD\u7136\u9AD8\u4E8E\u6309\u7D22\u5F15\u76F4\u63A5\u8BBF\u95EE\u3002</p><p>\u6B63\u5982\u6211\u6240\u8BF4\uFF0C\u8FD9\u662F\u4E00\u4E2A\u7B3C\u7EDF\u7684\u6982\u62EC\uFF0C\u4F46\u662F\u5982\u679C\u8FD9\u79CD\u65B9\u6CD5\uFF08\u6309\u540D\u79F0\u67E5\u627E\u7D22\u5F15\uFF0C\u7136\u540E\u6309\u7D22\u5F15\u68C0\u7D22\uFF09\u4E0D\u662F\u5927\u591A\u6570JDBC\u9A71\u52A8\u7A0B\u5E8F\u7684\u5DE5\u4F5C\u65B9\u5F0F\uFF0C\u6211\u4F1A\u611F\u5230\u60CA\u8BB6\uFF0C\u6240\u4EE5\u6211\u89C9\u5F97\u6309\u7D22\u5F15\u67E5\u627E\u901A\u5E38\u4F1A\u66F4\u5FEB\u3002</p><p>\u5FEB\u901F\u6D4F\u89C8\u4E00\u4E9B\u9A71\u52A8\u7A0B\u5E8F\uFF0C\u6E90\u7801\u539F\u7406\u5176\u5B9E\u5C31\u662F\u5982\u6B64\uFF1A</p><ul><li>Firebird\uFF08Jaybird\uFF0C\u62AB\u9732\uFF1A\u6211\u7EF4\u62A4\u6B64\u9A71\u52A8\u7A0B\u5E8F\uFF09</li><li>MySQL\uFF08MySQL Connector / J\uFF09</li><li>PostgreSQL</li><li>Oracle</li><li>HSQLDB</li><li>SQL Server\uFF08\u7528\u4E8ESQL Server\u7684Microsoft JDBC\u9A71\u52A8\u7A0B\u5E8F\uFF09</li></ul><p>\u539F\u6587: Speaking as a JDBC driver maintainer (and, I admit, making some sweeping generalizations which not necessarily apply to all JDBC driver), row values will usually be stored in an array or list because that most naturally matches the way the data is received from the database server.</p><p>As a result, retrieving values by index will be the simplest. It might be as simple as something like (ignoring some of the nastier details of implementing a JDBC driver):</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token function">checkValidRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkValidIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> currentRow<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is about as fast as it gets.</p><p>On the other hand, looking up by column name is more work. Column names need to be treated case-insensitive, which has additional cost whether you normalize using lower or uppercase, or use a case-insensitive lookup using a TreeMap.</p><p>A simple implementation might be something like:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> columnLabel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token function">getIndexByLabel</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getIndexByLabel</span><span class="token punctuation">(</span><span class="token class-name">String</span> columnLabel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexMap <span class="token operator">=</span> <span class="token function">createOrGetIndexMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> columnIndex <span class="token operator">=</span> indexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>columnIndex <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">&quot;Column label &quot;</span> <span class="token operator">+</span> columnLabel <span class="token operator">+</span> <span class="token string">&quot; does not exist in the result set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> columnIndex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">createOrGetIndexMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ResultSetMetaData</span> rsmd <span class="token operator">=</span> <span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// reverse loop to ensure first occurrence of a column label is retained</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> idx <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> idx<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> label <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexMap <span class="token operator">=</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Depending on the API of the database and available statement metadata, it may require additional processing to determine the actual column labels of a query. Depending on the cost, this will likely only be determined when it is actually needed (when accessing column labels by name, or when retrieving result set metadata). In other words, the cost of createOrGetIndexMap() might be pretty high.</p><p>But even if that cost is negligible (eg the statement prepare metadata from the database server includes the column labels), the overhead of mapping the column label to index and then retrieving by index is obviously higher than directly retrieving by index.</p><p>Drivers could even just loop over the result set metadata each time and use the first whose label matches; this might be cheaper than building and accessing the hash map for result sets with a small number of columns, but the cost is still higher than direct access by index.</p><p>As I said, this is a sweeping generalization, but I would be surprised if this (lookup index by name, then retrieve by index) isn&#39;t how it works in the majority of JDBC drivers, which means that I expect that lookup by index will generally be quicker.</p><p>Taking a quick look at a number of drivers, this is the case for:</p><p>Firebird (Jaybird, disclosure: I maintain this driver) MySQL (MySQL Connector/J) PostgreSQL Oracle HSQLDB SQL Server (Microsoft JDBC Driver for SQL Server) I&#39;m not aware of JDBC drivers where retrieval by column name would be equivalent in cost or even cheaper.</p>`,26),o=[p];function c(l,i){return s(),a("div",null,o)}var k=n(e,[["render",c],["__file","\u6309\u4F4D\u7F6E\u8BFB\u53D6ResultSet\u6BD4\u6309\u540D\u79F0\u5FEB.html.vue"]]);export{k as default};
