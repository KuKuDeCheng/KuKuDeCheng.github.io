import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a as i}from"./app-CtKwaxkk.js";const a={},o=i('<h2 id="代码设计原理" tabindex="-1"><a class="header-anchor" href="#代码设计原理"><span>代码设计原理</span></a></h2><ol><li><p>单一职责原则：一个类或者一个接口，最好只负责一项职责</p></li><li><p>里氏替换原则：子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</p></li><li><p>依赖倒置原则：低层模块尽量都要有抽象类或者接口，或者两者都有</p></li><li><p>接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上</p></li><li><p>迪米特法则：一个对象应该对其他对象保持最少的了解</p></li><li><p>开闭原则：一个软件实体如类、模版和函数应该对扩展，对修改关闭</p></li></ol>',2),p=[o];function l(r,c){return n(),e("div",null,p)}const s=t(a,[["render",l],["__file","代码设计原理.html.vue"]]),d=JSON.parse('{"path":"/JAVA/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86.html","title":"代码设计原理","lang":"zh-CN","frontmatter":{"title":"代码设计原理","date":"2020-04-14T00:00:00.000Z","category":"Java","description":"代码设计原理 单一职责原则：一个类或者一个接口，最好只负责一项职责 里氏替换原则：子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法 依赖倒置原则：低层模块尽量都要有抽象类或者接口，或者两者都有 接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上 迪米特法则：一个对象应该对其他对象保持最少的了解 开闭原则：一...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/JAVA/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"代码设计原理"}],["meta",{"property":"og:description","content":"代码设计原理 单一职责原则：一个类或者一个接口，最好只负责一项职责 里氏替换原则：子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法 依赖倒置原则：低层模块尽量都要有抽象类或者接口，或者两者都有 接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上 迪米特法则：一个对象应该对其他对象保持最少的了解 开闭原则：一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T11:40:02.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2020-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T11:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码设计原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T11:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"代码设计原理","slug":"代码设计原理","link":"#代码设计原理","children":[]}],"git":{"createdTime":1719488402000,"updatedTime":1719488402000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":1}]},"readingTime":{"minutes":0.67,"words":202},"filePathRelative":"JAVA/代码设计原理.md","localizedDate":"2020年4月14日","excerpt":"<h2>代码设计原理</h2>\\n<ol>\\n<li>\\n<p>单一职责原则：一个类或者一个接口，最好只负责一项职责</p>\\n</li>\\n<li>\\n<p>里氏替换原则：子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</p>\\n</li>\\n<li>\\n<p>依赖倒置原则：低层模块尽量都要有抽象类或者接口，或者两者都有</p>\\n</li>\\n<li>\\n<p>接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上</p>\\n</li>\\n<li>\\n<p>迪米特法则：一个对象应该对其他对象保持最少的了解</p>\\n</li>\\n<li>\\n<p>开闭原则：一个软件实体如类、模版和函数应该对扩展，对修改关闭</p>\\n</li>\\n</ol>","autoDesc":true}');export{s as comp,d as data};
