import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,a as l}from"./app-DPxQZnZ9.js";const a="/assets/7-DR7-hS0g.png",r={},n=l('<ol><li>【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推： <img src="'+a+'" alt="" loading="lazy"></li></ol><ul><li>开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。</li><li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li><li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li><li>Service 层：相对具体的业务逻辑服务层。</li><li>Manager 层：通用业务处理层，它有如下特征： <ul><li>1） 对第三方平台封装的层，预处理返回结果及转化异常信息。</li><li>2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</li><li>3） 与 DAO 层交互，对多个 DAO 的组合复用。</li></ul></li><li>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OB 等进行数据交互。</li><li>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li></ul><ol start="2"><li><p>【参考】（分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。Manager 层与 Service 同机部署，日志方式与 DAO 层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。Web 层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p></li><li><p>【参考】分层领域模型规约：</p></li></ol><ul><li>DO（Data Object）：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li><li>DTO（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</li><li>BO（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</li><li>Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li><li>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li></ul>',4),o=[n];function c(p,s){return i(),t("div",null,o)}const d=e(r,[["render",c],["__file","20-应用分层.html.vue"]]),g=JSON.parse('{"path":"/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/20-%E5%BA%94%E7%94%A8%E5%88%86%E5%B1%82.html","title":"应用分层","lang":"zh-CN","frontmatter":{"title":"应用分层","date":"2021-02-15T00:00:00.000Z","category":"阿里Java开发手册","order":20,"description":"【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推： 开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/20-%E5%BA%94%E7%94%A8%E5%88%86%E5%B1%82.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"应用分层"}],["meta",{"property":"og:description","content":"【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推： 开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2021-02-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"应用分层\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":2.47,"words":742},"filePathRelative":"阿里Java开发手册/20-应用分层.md","localizedDate":"2021年2月15日","excerpt":"<ol>\\n<li>【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推：\\n</li>\\n</ol>\\n<ul>\\n<li>开放接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。</li>\\n<li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li>\\n<li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>\\n<li>Service 层：相对具体的业务逻辑服务层。</li>\\n<li>Manager 层：通用业务处理层，它有如下特征：\\n<ul>\\n<li>1） 对第三方平台封装的层，预处理返回结果及转化异常信息。</li>\\n<li>2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</li>\\n<li>3） 与 DAO 层交互，对多个 DAO 的组合复用。</li>\\n</ul>\\n</li>\\n<li>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OB 等进行数据交互。</li>\\n<li>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>\\n</ul>","autoDesc":true}');export{d as comp,g as data};
