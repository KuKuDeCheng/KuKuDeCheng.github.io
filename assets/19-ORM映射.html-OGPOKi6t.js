import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as s,a}from"./app-BuJj135v.js";const e={},l=a(`<ol><li>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><ul><li>1）增加查询分析器解析成本。</li><li>2）增减字段容易与 resultMap 配置不一致。</li><li>3）无用字段增加网络消耗，尤其是 text 类型的字段。</li></ul></div><ol start="2"><li>【强制】POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>参见定义 POJO 类以及数据库字段定义规定，在 sql.xml 增加映射，是必须的。</p></div><ol start="3"><li>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义<code>&lt;resultMap&gt;；</code>反过来，每一个表也必然有一个<code>&lt;resultMap&gt;</code>与之对应。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>配置映射关系，使字段与 DO 类解耦，方便维护。</p></div><ol start="4"><li>【强制】sql.xml 配置参数使用：#{}，#param# 不要使用\${} 此种方式容易出现 SQL 注入。</li><li>【强制】iBATIS 自带的 queryForList(String statementName,int start,int size)不推荐使用。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取start,size 的子集合。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> map </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, start);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, size);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ol start="6"><li>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</li></ol><div class="hint-container caution"><p class="hint-container-title">反例</p><p>某同学为避免写一个<code>&lt;resultMap\\&gt;</code>，直接使用 HashTable 来接收数据库返回结果，结果出现日常是把 bigint 转成 Long 值，而线上由于数据库版本不一样，解析成 BigInteger，导致线上问题。</p></div><ol start="7"><li>【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。</li><li>【推荐】不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL 时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</li><li>【参考】@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</li><li>【参考】<code>&lt;isEqual&gt;</code>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；<code>&lt;isNotEmpty&gt;</code>表示不为空且不为 null 时执行；<code>&lt;isNotNull&gt;</code>表示不为 null 值时执行。</li></ol>`,12),n=[l];function r(p,h){return s(),t("div",null,n)}const d=i(e,[["render",r],["__file","19-ORM映射.html.vue"]]),k=JSON.parse('{"path":"/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/19-ORM%E6%98%A0%E5%B0%84.html","title":"ORM映射","lang":"zh-CN","frontmatter":{"title":"ORM映射","date":"2021-02-15T00:00:00.000Z","category":"阿里Java开发手册","order":19,"description":"【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。 说明 1）增加查询分析器解析成本。 2）增减字段容易与 resultMap 配置不一致。 3）无用字段增加网络消耗，尤其是 text 类型的字段。 【强制】POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/19-ORM%E6%98%A0%E5%B0%84.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"ORM映射"}],["meta",{"property":"og:description","content":"【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。 说明 1）增加查询分析器解析成本。 2）增减字段容易与 resultMap 配置不一致。 3）无用字段增加网络消耗，尤其是 text 类型的字段。 【强制】POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2021-02-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ORM映射\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":2.22,"words":666},"filePathRelative":"阿里Java开发手册/19-ORM映射.md","localizedDate":"2021年2月15日","excerpt":"<ol>\\n<li>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</li>\\n</ol>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">说明</p>\\n<ul>\\n<li>1）增加查询分析器解析成本。</li>\\n<li>2）增减字段容易与 resultMap 配置不一致。</li>\\n<li>3）无用字段增加网络消耗，尤其是 text 类型的字段。</li>\\n</ul>\\n</div>\\n<ol start=\\"2\\">\\n<li>【强制】POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</li>\\n</ol>","autoDesc":true}');export{d as comp,k as data};
