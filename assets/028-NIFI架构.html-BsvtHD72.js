import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,a as i}from"./app-CtKwaxkk.js";const r="/assets/zero-leader-node-Cq365huN.png",n="/assets/zero-leader-cluster-mrJOG_UB.png",a={},l=i('<figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>NiFi在主机操作系统上的JVM中执行。JVM上NiFi的主要组件如下：</p><h2 id="web-server" tabindex="-1"><a class="header-anchor" href="#web-server"><span>Web Server</span></a></h2><p>web服务器的目的是托管NiFi基于HTTP的命令和控制API。</p><h2 id="flow-controller" tabindex="-1"><a class="header-anchor" href="#flow-controller"><span>Flow Controller</span></a></h2><p>流量控制器是操作的大脑。它为运行扩展提供线程，并管理扩展何时接收要执行的资源的时间表。</p><h2 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions"><span>Extensions</span></a></h2><p>其他文档中描述了各种类型的NiFi扩展。这里的关键是扩展在JVM中操作和执行。</p><h2 id="flowfile-repository" tabindex="-1"><a class="header-anchor" href="#flowfile-repository"><span>FlowFile Repository</span></a></h2><p>流文件存储库是NiFi跟踪它所知道的关于当前在流中活动的给定流文件的状态的地方。存储库的实现是可插入的。默认方法是位于指定磁盘分区上的持久预写日志。</p><h2 id="content-repository" tabindex="-1"><a class="header-anchor" href="#content-repository"><span>Content Repository</span></a></h2><p>内容存储库是给定流文件的实际内容字节所在的位置。存储库的实现是可插入的。默认方法是一种相当简单的机制，它在文件系统中存储数据块。可以指定多个文件系统存储位置，以便使用不同的物理分区来减少任何单个卷上的争用。</p><h2 id="provenance-repository" tabindex="-1"><a class="header-anchor" href="#provenance-repository"><span>Provenance Repository</span></a></h2><p>出处存储库是存储所有出处事件数据的地方。存储库构造是可插入的，默认实现是使用一个或多个物理磁盘卷。在每个位置内，事件数据都是索引和可搜索的。</p><p>NiFi也可以在集群内运行。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从nifi1.0版本开始，采用了零前导聚类范式。NiFi集群中的每个节点对数据执行相同的任务，但每个节点对不同的数据集进行操作。apachezookeeper选择一个节点作为集群协调器，故障转移由ZooKeeper自动处理。所有集群节点都向集群协调器报告心跳和状态信息。集群协调器负责断开和连接节点。另外，每个集群都有一个主节点，也是由ZooKeeper选择的。作为数据流管理器，您可以通过任何节点的用户界面（UI）与NiFi集群交互。您所做的任何更改都会复制到集群中的所有节点，从而允许多个入口点。</p>',17),p=[l];function s(c,h){return o(),t("div",null,p)}const m=e(a,[["render",s],["__file","028-NIFI架构.html.vue"]]),F=JSON.parse('{"path":"/ApacheNIFI%E6%95%99%E7%A8%8B/028-NIFI%E6%9E%B6%E6%9E%84.html","title":"NIFI架构","lang":"zh-CN","frontmatter":{"title":"NIFI架构","date":"2021-03-02T00:00:00.000Z","category":"ApacheNIFI教程","tag":"NIFI","author":"张诚","description":"NiFi在主机操作系统上的JVM中执行。JVM上NiFi的主要组件如下： Web Server web服务器的目的是托管NiFi基于HTTP的命令和控制API。 Flow Controller 流量控制器是操作的大脑。它为运行扩展提供线程，并管理扩展何时接收要执行的资源的时间表。 Extensions 其他文档中描述了各种类型的NiFi扩展。这里的关键...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/ApacheNIFI%E6%95%99%E7%A8%8B/028-NIFI%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"NIFI架构"}],["meta",{"property":"og:description","content":"NiFi在主机操作系统上的JVM中执行。JVM上NiFi的主要组件如下： Web Server web服务器的目的是托管NiFi基于HTTP的命令和控制API。 Flow Controller 流量控制器是操作的大脑。它为运行扩展提供线程，并管理扩展何时接收要执行的资源的时间表。 Extensions 其他文档中描述了各种类型的NiFi扩展。这里的关键..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T11:40:02.000Z"}],["meta",{"property":"article:author","content":"张诚"}],["meta",{"property":"article:tag","content":"NIFI"}],["meta",{"property":"article:published_time","content":"2021-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T11:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NIFI架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T11:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张诚\\"}]}"]]},"headers":[{"level":2,"title":"Web Server","slug":"web-server","link":"#web-server","children":[]},{"level":2,"title":"Flow Controller","slug":"flow-controller","link":"#flow-controller","children":[]},{"level":2,"title":"Extensions","slug":"extensions","link":"#extensions","children":[]},{"level":2,"title":"FlowFile Repository","slug":"flowfile-repository","link":"#flowfile-repository","children":[]},{"level":2,"title":"Content Repository","slug":"content-repository","link":"#content-repository","children":[]},{"level":2,"title":"Provenance Repository","slug":"provenance-repository","link":"#provenance-repository","children":[]}],"git":{"createdTime":1719488402000,"updatedTime":1719488402000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":1}]},"readingTime":{"minutes":1.94,"words":581},"filePathRelative":"ApacheNIFI教程/028-NIFI架构.md","localizedDate":"2021年3月2日","excerpt":"<figure><figcaption></figcaption></figure>\\n<p>NiFi在主机操作系统上的JVM中执行。JVM上NiFi的主要组件如下：</p>\\n<h2>Web Server</h2>\\n<p>web服务器的目的是托管NiFi基于HTTP的命令和控制API。</p>\\n<h2>Flow Controller</h2>\\n<p>流量控制器是操作的大脑。它为运行扩展提供线程，并管理扩展何时接收要执行的资源的时间表。</p>\\n<h2>Extensions</h2>\\n<p>其他文档中描述了各种类型的NiFi扩展。这里的关键是扩展在JVM中操作和执行。</p>\\n<h2>FlowFile Repository</h2>","autoDesc":true}');export{m as comp,F as data};
