import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as p,b as e,a as n,o as l}from"./app-C3hOzZo_.js";const a="/assets/1-DXtuFb7C.jpeg",s="/assets/2-CPWWToSI.jpeg",i="/assets/3-BLip6Sl6.png",r="/assets/4-hNj-LqVY.jpeg",c="/assets/5-BdF8jeUq.png",g="/assets/6-CvZ5-iuv.jpeg",d="/assets/7-CyECAzl-.jpeg",F="/assets/8-BzMzFlD4.jpeg",I="/assets/9-CHw510M8.jpeg",f="/assets/10-BYvYV-aQ.jpeg",h="/assets/11-BI02vWf-.jpeg",u="/assets/12-Cbx2bVBE.jpeg",m="/assets/13-DfkFJkW6.jpeg",N="/assets/14-C25XEWxb.jpeg",_="/assets/15-DQWLV028.jpeg",w="/assets/16-BRx7Exs7.jpeg",y="/assets/17-CB49gVmb.jpeg",b="/assets/18-Duv9krWh.jpeg",v="/assets/19-BBdoOSeP.jpeg",x="/assets/20-BTyucUBR.jpeg",C="/assets/21-DuFQ1OWs.jpeg",z="/assets/22-DK-FnEF3.png",P="/assets/23-EO54keC9.jpeg",k={},A=e("p",null,"我将在本文中介绍：",-1),j=e("ul",null,[e("li",null,"什么是ApacheNIFI，应在什么情况下使用它，理解在NIFI中的关键概念。")],-1),E=e("p",null,"我不会介绍的内容：",-1),R=e("p",null,"-NIFI集群的安装，部署，监视，安全性和管理。",-1),B=n('<h2 id="什么是apachenifi" tabindex="-1"><a class="header-anchor" href="#什么是apachenifi"><span>什么是ApacheNIFI？</span></a></h2><p>在ApacheNIFI项目的官网上，可以找到以下定义：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>一个易于使用，功能强大的、可靠的处理和分发数据的系统。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来我们分析一下关键字。</p><h3 id="nifi定义" tabindex="-1"><a class="header-anchor" href="#nifi定义"><span>NIFI定义</span></a></h3><p><strong>处理和分发数据</strong></p><p>这是NIFI的要旨。它可以在系统中移动数据，并为你提供处理该数据的工具。</p><p>NIFI可以处理各种各样的数据源和不同格式的数据。你可以从一个源中获取数据，对其进行转换，然后将其推送到另一个目标存储地。</p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>易于使用</strong></p><p>Processors-boxes-通过连接器链接-箭头创建流程。NIFI提供了一个基于流的编程体验。</p><p>NIFI让我们一眼就能理解一组数据流操作，而这或许将需要数百行源代码来实现。</p><p>考虑下面的pipeline：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果要在NIFI中实现转换上述的数据流，只需在NIFI图形用户界面，将三个组件拖放到画布中，然后连接做配置。也就需要个两分钟。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而如果你编写代码来执行相同的操作，则可能需要数百行才能达到相似的结果。</p><p>NIFI在构建数据pipeline方面更具表现力，我们不需要写代码，而NIFI就是为此而设计的。</p><p><strong>强大</strong></p><p>NIFI提供了许多开箱即用的处理器。使用者其实是站在巨人的肩膀上。这些标准处理器可以处理你可能遇到的绝大多数需求。</p><p>NIFI是高度并发的，但其内部封装了相关的复杂性。我们看到的处理器是一个高级抽象，它掩盖了并行编程固有的复杂性。我们可以多个处理器一起运行，一个处理器也可以有多个线程运行。</p><p>并发是你不希望打开的计算型Pandora盒。NIFI使得pipeline构建器免受并发复杂性的影响。</p><p><strong>可靠</strong></p><p>NIFI的设计实现具有扎实的理论基础。与SEDA之类的模型相似(SEDA全称是：stage event driver architecture，中文直译为“分阶段的事件驱动架构”，它旨在结合事件驱动和多线程模式两者的优点，从而做到易扩展，解耦合，高并发。各个stage之间的通信由event来传递，event的处理由stage的线程池异步处理。)。</p><p>对于数据流系统，要解决的主要问题之一就是可靠性。你想确保发送到某处的数据得到了有效接收。</p><p>NIFI通过多种机制在任何时间点跟踪系统状态，从而实现了高度的可靠性。这些机制是可配置的，因此你可以在延迟和应用程序所需的吞吐量之间进行适当的权衡。</p><p>NIFI利用lineage和provenance特征来跟踪每条数据的历史记录。它使得知道每条信息发生了什么转变。</p><p>Apache NIFI提出的数据血缘解决方案被证明是审核数据pipeline的出色工具。在诸如欧盟这样的跨国参与者提出支持准确数据处理的准则的背景下，数据血缘功能对于增强人们对大数据和AI系统的信心至关重要。</p><h3 id="为什么要使用nifi" tabindex="-1"><a class="header-anchor" href="#为什么要使用nifi"><span>为什么要使用NIFI？</span></a></h3><p>在确定解决方案时，请记住大数据的四个特点。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Volume — 你有多少数据？在数量级上，你接近几GB还是几百个PB？</li><li>Variety — 你有多少个数据源？你的数据是否结构化？如果是，结构是否经常变化？</li><li>Velocity — 你需要处理的频率是多少？是信用卡付款吗？它是物联网设备发送的每日性能报告吗？</li><li>Veracity — 你可以信任数据吗？另外，在操作之前是否需要进行多次清洁操作？</li></ul><p>NIFI无缝地从多个数据源提取数据，并提供了处理数据中不同模式的机制。因此，当数据种类繁多时，它就非常适用了。</p><p>如果数据准确性不高，则NIFI尤其有价值。NIFI提供了多个处理器来清理和格式化数据。</p><p>通过其配置选项，NIFI可以解决各种 volume/velocity 场景问题。</p><p><strong>数据路由解决方案的应用程序列表越来越多</strong></p><p>物联网的兴起及其生成的数据流都强调了诸如Apache NIFI之类的工具的重要性。</p><ul><li>微服务是新潮。在那些松耦合的服务中，数据是服务之间的契约。NIFI是在这些服务之间路由数据的可靠方法。</li><li>物联网将大量数据带到云中。对从边缘到云的数据的采集和验证带来了许多新挑战，NIFI可以有效应对这些挑战（主要是通过MiNIFI，针对边缘设备的NIFI项目）</li><li>制定了新的准则和法规以重新调整大数据经济。在日益增加的监视范围内，对于企业来说，至关重要的是清楚地了解其数据pipeline。例如，NIFI数据血缘可能会有助于你遵守法规。</li></ul><p><strong>弥合大数据专家与其他专家之间的鸿沟</strong></p><p>从用户界面可以看到，用NIFI表示的数据流非常适合与你的数据pipeline进行通信。它可以帮助你的组织成员更加了解数据pipeline中发生的事情。</p><ul><li>分析师正在寻求有关为什么这些数据以这种方式到达此处的见解？坐在一起，并在流程中漫步。在五分钟内，你将对提取转换和加载-ETL-pipeline有深入的了解。</li><li>你是否需要同行的反馈，以帮助你创建新的错误处理流程？NIFI决定将错误路径视为有效结果，这是一项设计决策。期望流程审查比传统的代码审查要短。</li></ul><p><strong>你应该使用它吗？或许吧</strong></p><p>NIFI本身就易于使用。尽管如此，它还是一个企业数据流平台。它提供了一套完整的功能，你可能只需要其中的一部分即可。</p><p>如果你是从头开始并管理来自受信任数据源的一些数据，那么最好设置ETL pipeline。你可能只需要从数据库中捕获更改数据和一些数据准备脚本即可。</p><p>另一方面，如果你在使用现有大数据解决方案（用于存储，处理或消息传递）的环境中工作，则NIFI可以很好地与它们集成，并且很可能会很快获胜。你可以利用现成的连接器连接其他大数据解决方案。</p><p>既然我们已经看到了Apache NIFI的优点，现在我们来看看它的关键概念并剖析其内部结构。</p><p>我们已经理解了“NiFi is boxes and arrow programming”。但是，如果你必须使用NIFI，则可能需要更多地了解其工作原理。</p><p>在第二部分中，我将说明Apache NIFI的关键概念。</p><h2 id="剖析apache-nifi" tabindex="-1"><a class="header-anchor" href="#剖析apache-nifi"><span>剖析Apache NIFI</span></a></h2><p>启动NIFI时，你会进入其Web界面。 Web UI是设计和控制数据pipeline的蓝图。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在NIFI中，处理器通过connections连接在一起。在前面介绍的示例数据流中，有三个处理器。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>理解NIFI术语</strong></p><p>要使用NIFI表示数据流，你必须首先掌握其语言。不用担心，只需几个术语就足以掌握其背后的概念。</p><p>那些一个个黑匣子称为处理器，它们通过称为connections的队列交换名为FlowFiles的信息块。最后，FlowFile Controller负责管理这些组件之间的资源。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>让我们看看它是如何工作的。</p><h3 id="flowfile" tabindex="-1"><a class="header-anchor" href="#flowfile"><span>FlowFile</span></a></h3><p>在NIFI中，FlowFile是在pipeline处理器中移动的信息包。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>FlowFile分为两个部分：</p><ul><li><strong>Attributes</strong>，即键/值对。例如，文件名，文件路径和唯一标识符是标准属性。</li><li><strong>Content</strong>，对字节流的引用构成了FlowFile内容。</li></ul><p>FlowFile不包含数据本身，否则会严重限制pipeline的吞吐量。相反，FlowFile保留的是一个指针，该指针引用存储在本地存储中某个位置的数据。这个地方称为内容存储库(Content Repository)。</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了访问内容，FlowFile从内容存储库中声明资源(claims),然后将跟踪内容所在位置的确切磁盘偏移，并将其返回FlowFile。</p><p>并非所有处理器都需要访问FlowFile的内容来执行其操作-例如，聚合两个FlowFiles的内容不需要将其内容加载到内存中。</p><p>当处理器修改FlowFile的内容时，将保留先前的数据。NIFI的<code>copies-on-write</code>机制会在将内容复制到新位置时对其进行修改。原始信息保留在内容存储库中。</p><p><strong>Example</strong></p><p>比如一个压缩FlowFile内容的处理器。原始内容会保留在内容存储库中，NIFI并为压缩内容创建一个新条目。</p><p>内容存储库最终将返回对压缩内容的引用。 FlowFile里指向内容的指针被更新为指向压缩数据。</p><p>下图总结了带有压缩FlowFiles内容的处理器的示例。</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Reliability</strong></p><p>NIFI声称是可靠的，实际上如何？当前使用的所有FlowFiles的属性以及对其内容的引用都存储在<code>FlowFile Repository</code>中。</p><p>在pipeline的每个步骤中，在对流文件进行修改之前，首先将其以预写日志的方式(write-ahead log)记录在<code>FlowFile Repository</code>中。</p><p>对于系统中当前存在的每个FlowFile，<code>FlowFile Repository</code>存储：</p><ul><li>FlowFile属性</li><li>指向FlowFile内容的指针</li><li>FlowFile的状态。例如：Flowfile在此瞬间属于哪个队列。</li></ul><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>FlowFile Repository</code>为我们提供了流程的最新状态；因此，它是从中断中恢复的强大工具。</p><p>NIFI提供了另一个工具来跟踪流程中所有FlowFiles的完整历史记录：<code>Provenance Repository</code>。</p><p><strong>Provenance Repository</strong></p><p>每次修改FlowFile时，NIFI都会获取FlowFile及其上下文的快照。NIFI中此快照的名称是<code>Provenance Event</code>。<code>Provenance Repository</code>记录<code>Provenance Events</code>。</p><p><code>Provenance</code>使我们能够追溯数据血缘关系并为在NIFI中处理的每条信息建立完整的监管链。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>除了提供完整的数据血缘之外，<code>Provenance Repository</code>还提供从任何时间点重播数据的功能。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>等等，<code>FlowFile Repository</code>和<code>Provenance Repository</code>有什么区别？</p><p><code>FlowFile Repository</code>和<code>Provenance Repository</code>背后的想法非常相似，但是它们解决的是不同的问题。</p><ul><li><code>FlowFile Repository</code>是一个日志，仅包含系统中正在使用的FlowFiles的最新状态。这是flow的最新情况，可以快速从中断中恢复。</li><li><code>Provenance Repository</code>更为详尽，因为它可以跟踪流中每个FlowFile的完整生命周期。</li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以这么理解，<code>FlowFile Repository</code>里面保存的是你此时某个动作的照片，<code>Provenance Repository</code>保存的是你这个动作的视频。你可以倒退到过去的任何时刻，研究数据，并从给定的时间重放操作。它提供了数据的完整血缘关系。</p><h3 id="processor" tabindex="-1"><a class="header-anchor" href="#processor"><span>Processor</span></a></h3><p>处理器是执行操作的黑匣子。处理器可以访问FlowFile的属性和内容来执行所有类型的操作。它们使你能够在数据输入，标准数据转换/验证任务中执行许多操作，并将这些数据保存到各种数据接收器。</p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>NIFI在安装时会附带许多处理器。如果你找不到适合自己的用例的处理器，可以构建自己的处理器。</p><p>处理器是完成一项任务的高级抽象。这种抽象非常方便，因为它使pipeline的构建免受并发编程和错误处理机制的困扰。</p><p>处理器提供了多个配置设置的界面以微调其行为。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些处理器的属性是NIFI与你的应用程序需求之间的最后联系。细节很重要，所以pipeline建设者会花费大部分时间来微调这些属性以匹配预期的行为。</p><p><strong>Scaling</strong></p><p>对于每个处理器，你可以指定要同时运行的并发任务数。这样，流控制器将更多资源分配给该处理器，从而提高其吞吐量。处理器共享线程。如果一个处理器请求更多的线程，则其他处理器的可用线程就会少了。</p><p>横向扩展：扩展的另一种方法是增加NIFI群集中的节点数。</p><h3 id="process-group" tabindex="-1"><a class="header-anchor" href="#process-group"><span>Process Group</span></a></h3><p>现在，我们已经了解了什么是处理器，这很简单。</p><p>一堆处理器及其连接可以组成一个<code>Process Group</code>。你添加了一个<code>Input Port</code>和一个<code>Output Port</code>，以便<code>Process Group</code>可以接收和发送数据。</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="connections" tabindex="-1"><a class="header-anchor" href="#connections"><span>Connections</span></a></h3><p><code>Connections</code>是处理器之间的队列。这些队列允许处理器以不同的速率进行交互。就像存在不同尺寸的水管<code>Connections</code>可以具有不同的容量。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于处理器根据它们执行的操作以不同的速率消耗和产生数据，因此<code>Connections</code>充当FlowFiles的缓冲区。</p><p><code>Connections</code>中可以有多少数据是有限制的。同样，当水管已满时，你将无法再加水，否则水会溢出。</p><p>在NIFI中，你可以限制FlowFile的数量及其通过<code>Connections</code>的聚合内容的大小。</p><p>当你发送的数据超出<code>Connections</code>的处理能力会发生什么？</p><p>如果FlowFiles的数量或数据量超过定义的阈值，则将触发背压机制(backpressure)。在队列中没有空间之前，Flow Controller不会安排<code>Connections</code>上游的处理器再次运行。</p><p>假设你在两个处理器之间最多只能有10000个FlowFile。在某个时候，连接中有7000个元素。因为限制为10000。P1仍然可以通过<code>Connections</code>发送数据到P2。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在，假设处理器一下子向该<code>Connections</code>发送了4000个新的FlowFiles。 7000 + 4000 = 11000→我们超过了10000个FlowFiles的连接阈值。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个限制是软限制，表示可以超出限制，但是Flow Controller不会调度处理器P1，直到<code>Connections</code>恢复到其阈值（10000个FlowFiles）以下。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你想要设置适合于要处理的数据量和速度的<code>Connections</code>阈值，要始终考虑四个V(大数据的四个特点)。</p><p>超出限制的想法听起来很奇怪,当FlowFiles或关联数据的数量超过阈值时，将触发交换机制(swap mechanism)。</p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>优先处理FlowFiles</strong></p><p>NIFI中的<code>Connections</code>是高度可配置的。你可以选择如何在队列中确定FlowFiles的优先级，以确定接下来要处理的文件。</p><p>在可用的配置中，例如，先进先出-FIFO。但是，你甚至可以通过FlowFile中的属性来优先处理传入数据包。</p><h3 id="flow-controller" tabindex="-1"><a class="header-anchor" href="#flow-controller"><span>Flow Controller</span></a></h3><p>Flow Controller是将一切融合在一起的粘合剂。它为处理器分配和管理线程。这就是执行数据流的方式。</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此外，Flow Controller还可以添加Controller Services。</p><h3 id="controller-service" tabindex="-1"><a class="header-anchor" href="#controller-service"><span>Controller Service</span></a></h3><p>这些服务有助于管理共享资源，例如数据库连接或云服务提供商凭据。Controller Services是守护进程(daemons)。它们在后台运行，并提供配置，资源和参数供处理器执行。</p><p>例如，你可以使用AWS凭证提供程序服务使你的服务与S3存储桶进行交互，而不必担心处理器级别的凭证。</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>与处理器一样，开箱即用的控制器服务也很多。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>如果你详细的阅读了这篇文章每一行内容，那么我相信，你已经是一个合格的NIFI设计者了，接下来你只需要考虑你的需求需要用到哪些组件，去配置那些组件就OK了。</p>',138);function S(T,V){return l(),t("div",null,[A,j,E,R,p(" more "),B])}const O=o(k,[["render",S],["__file","003-NIFI入门.html.vue"]]),Z=JSON.parse('{"path":"/ApacheNIFI%E6%95%99%E7%A8%8B/003-NIFI%E5%85%A5%E9%97%A8.html","title":"NIFI读完即入门","lang":"zh-CN","frontmatter":{"title":"NIFI读完即入门","date":"2020-05-21T00:00:00.000Z","category":"ApacheNIFI教程","tag":"NIFI","order":3,"description":"我将在本文中介绍： 什么是ApacheNIFI，应在什么情况下使用它，理解在NIFI中的关键概念。 我不会介绍的内容： -NIFI集群的安装，部署，监视，安全性和管理。","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/ApacheNIFI%E6%95%99%E7%A8%8B/003-NIFI%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"NIFI读完即入门"}],["meta",{"property":"og:description","content":"我将在本文中介绍： 什么是ApacheNIFI，应在什么情况下使用它，理解在NIFI中的关键概念。 我不会介绍的内容： -NIFI集群的安装，部署，监视，安全性和管理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:tag","content":"NIFI"}],["meta",{"property":"article:published_time","content":"2020-05-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NIFI读完即入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"什么是ApacheNIFI？","slug":"什么是apachenifi","link":"#什么是apachenifi","children":[{"level":3,"title":"NIFI定义","slug":"nifi定义","link":"#nifi定义","children":[]},{"level":3,"title":"为什么要使用NIFI？","slug":"为什么要使用nifi","link":"#为什么要使用nifi","children":[]}]},{"level":2,"title":"剖析Apache NIFI","slug":"剖析apache-nifi","link":"#剖析apache-nifi","children":[{"level":3,"title":"FlowFile","slug":"flowfile","link":"#flowfile","children":[]},{"level":3,"title":"Processor","slug":"processor","link":"#processor","children":[]},{"level":3,"title":"Process Group","slug":"process-group","link":"#process-group","children":[]},{"level":3,"title":"Connections","slug":"connections","link":"#connections","children":[]},{"level":3,"title":"Flow Controller","slug":"flow-controller","link":"#flow-controller","children":[]},{"level":3,"title":"Controller Service","slug":"controller-service","link":"#controller-service","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":13.6,"words":4081},"filePathRelative":"ApacheNIFI教程/003-NIFI入门.md","localizedDate":"2020年5月21日","excerpt":"<p>我将在本文中介绍：</p>\\n<ul>\\n<li>什么是ApacheNIFI，应在什么情况下使用它，理解在NIFI中的关键概念。</li>\\n</ul>\\n<p>我不会介绍的内容：</p>\\n<p>-NIFI集群的安装，部署，监视，安全性和管理。</p>\\n","autoDesc":true}');export{O as comp,Z as data};
