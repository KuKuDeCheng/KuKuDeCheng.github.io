import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,c as r,f as p,b as e,d as i,e as n,w as s,a as t,o as d}from"./app-C3hOzZo_.js";const l="/assets/2-D5ikPFoQ.png",g="/assets/22-CV8UDxzG.png",h="/assets/23-DpMdwANN.png",u="/assets/1-DyBKkoAr.png",f="/assets/3-DHD5fAHS.png",m="/assets/4-CrSziJ61.png",b="/assets/24-BWtNAR9x.png",k="/assets/5-CTObcSR2.png",I="/assets/6-F4RP-K5M.png",y="/assets/7-Bt0jbZxZ.png",v="/assets/8-B5HpCExc.png",_="/assets/9-rKuWnDf0.png",F="/assets/10-Bdwzd-DN.png",N="/assets/11-CoIhyVcO.png",C="/assets/12-DWneD-GH.png",A="/assets/13-y29FzDIs.png",x="/assets/14-DEhsynXp.png",E="/assets/15-BPtIQNCm.png",S="/assets/16-BBD_MSqN.png",D="/assets/17-WgBXB2h5.png",B="/assets/18-B7QPv5Fd.png",T="/assets/19-zoIxwNJ-.png",P="/assets/20-CNi2x_oT.png",z="/assets/21-C2nlMSmo.png",R="/assets/25-brrki34F.png",G="/assets/26-DSouO8oj.png",L="/assets/27-hFNf3cmn.png",O="/assets/28-6USSKoGy.png",w="/assets/29-B0QU2xdx.png",Q="/assets/30-DYE3v5xH.png",M="/assets/31-kbinB_uj.png",q="/assets/32-OTJIMqBG.png",j="/assets/33-DvhjQEvJ.png",V="/assets/34-BMDieF8T.png",U={},H=e("p",null,'初衷：对于一些新接触Apache NIFI的小伙伴来说，他们急于想体验NIFI，恨不得直接找到一篇文章，照着做就直接能够解决目前遇到的需求或者问题，回想当初的我，也是这个心态。其实这样的心态是不对的。好多加入NIFI学习群的新手同学都会有这个问题，一些基本的概念和知识点都没有掌握，然后提出了一堆很初级的问题，对于这些问题，我们可能已经回答了几十上百次，厌倦了，所以大家一般会说"你先去看文档吧！"。其实，对于一个新手，直接看文档，也是一脸懵。所以在这里，我带领新手的你，新建一个同步的流程，并尽可能在新建流程的同时，穿插一些基本概念。跟随本文一起操作或者只是看看，最后你可能就找到了入门的感觉了。',-1),J=t('<h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h2><ul><li>Apache NIFI：1.11.4 单节点</li><li>Linux：CentOS Linux release 7.5.1804 16G内存 48G存储 虚拟机</li><li>DB：MySQL</li></ul><h2 id="apache-nifi-部署" tabindex="-1"><a class="header-anchor" href="#apache-nifi-部署"><span>Apache NIFI 部署</span></a></h2><h3 id="获取安装包" tabindex="-1"><a class="header-anchor" href="#获取安装包"><span>获取安装包</span></a></h3>',4),W=e("li",null,[e("p",null,[i("通过官方网站下载对应的NIFI安装包:"),e("a",{href:"https://nifi.apache.org/download.html",target:"_blank",rel:"noopener noreferrer"},"官网下载")])],-1),Z=e("li",null,[e("p",null,[i("通过国内镜像来下载最新发布的NIFI安装包:"),e("a",{href:"http://mirror.bit.edu.cn/apache/nifi/",target:"_blank",rel:"noopener noreferrer"},"北理镜像"),i(),e("a",{href:"https://mirrors.tuna.tsinghua.edu.cn/apache/nifi/",target:"_blank",rel:"noopener noreferrer"},"清华镜像")])],-1),K=t(`<p>如果不是编译源码，建议使用国内镜像去下载，一般直接下载zip包就可以了，加入最新版本时1.11.4，那就下载nifi-1.11.4-bin.zip</p><h3 id="部署apache-nifi" tabindex="-1"><a class="header-anchor" href="#部署apache-nifi"><span>部署Apache NIFI</span></a></h3><ol><li><p>上传Apache NIFI包到Linux上，解压安装包；或者将你的本地作为服务器，直接解压zip包。</p></li><li><p>在解压的目录下，找到conf目录，编辑<code>bootstrap.conf</code>文件，修改NIFI的内存配置，默认的值比较小，比如这里我改成启动2g，最大10g</p></li></ol><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">java.arg.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">-Xms2g</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">java.arg.3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">-Xmx10g</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在解压的目录下，找到bin目录，可以看到里面有一些脚本</li></ol><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">dump-nifi.bat  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">nifi-env.bat  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">nifi-env.sh  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">nifi.sh         </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">run-nifi.bat  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">status-nifi.bat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Linux或者Mac，使用<code>nifi.sh start</code>启动NIFI，<code>nifi.sh stop</code>停止NIFI，<code>nifi.sh restart</code>重启NIFI。</p><p>Windows下，直接双击<code>run-nifi.bat</code>即可，退出的时候关闭运行窗口就可以了。</p><p>在解压的目录下，找到log目录，当看到类似于下面的内容时，NIFI就启动成功了</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>2020-05-27 14:26:02,844 INFO [main] o.eclipse.jetty.server.AbstractConnector Started ServerConnector@58516c91{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}</span></span>
<span class="line"><span>2020-05-27 14:26:02,845 INFO [main] org.eclipse.jetty.server.Server Started @151563ms</span></span>
<span class="line"><span>2020-05-27 14:26:02,900 INFO [main] org.apache.nifi.nar.NarAutoLoader Starting NAR Auto-Loader for directory ./extensions ...</span></span>
<span class="line"><span>2020-05-27 14:26:02,901 INFO [main] org.apache.nifi.nar.NarAutoLoader NAR Auto-Loader started</span></span>
<span class="line"><span>2020-05-27 14:26:02,902 INFO [main] org.apache.nifi.web.server.JettyServer NiFi has started. The UI is available at the following URLs:</span></span>
<span class="line"><span>2020-05-27 14:26:02,903 INFO [main] org.apache.nifi.web.server.JettyServer http://******:8080/nifi</span></span>
<span class="line"><span>2020-05-27 14:26:02,903 INFO [main] org.apache.nifi.web.server.JettyServer http://127.0.0.1:8080/nifi</span></span>
<span class="line"><span>2020-05-27 14:26:02,906 INFO [main] org.apache.nifi.BootstrapListener Successfully initiated communication with Bootstrap</span></span>
<span class="line"><span>2020-05-27 14:26:02,907 INFO [main] org.apache.nifi.NiFi Controller initialization took 65344195582 nanoseconds (65 seconds).</span></span>
<span class="line"><span>2020-05-27 14:27:58,182 INFO [Write-Ahead Local State Provider Maintenance] org.wali.MinimalLockingWriteAheadLog org.wali.MinimalLockingWriteAheadLog@2407f1a8 checkpointed with 0 Records and 0 Swap Files i</span></span>
<span class="line"><span>n 27 milliseconds (Stop-the-world time = 4 milliseconds, Clear Edit Logs time = 4 millis), max Transaction ID -1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nifi在手-跟我走" tabindex="-1"><a class="header-anchor" href="#nifi在手-跟我走"><span>NIFI在手，跟我走！</span></a></h2><p>在浏览器输入<code>http://127.0.0.1:8080/nifi</code>，进入Apache NIFI的交互界面。我们看到背景是网格式的，通常我习惯把它叫做<strong>设计页面</strong>，在这个设计页面上，我们可以通过拖拉拽的形式设计DataFlow。</p><p><strong>1.准备表结构和数据</strong></p><p>我在MySQL里新建了两张表，一个叫<code>source</code>来源表,一个叫<code>target</code>目标表。两张表的结构是一样的，其中<code>increase</code>设计成自动递增的，这样<code>increase</code>是一个<strong>增量字段</strong>。</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>增量字段</strong>顾名思义，数据库表里每次新来的数据的这个增量字段的值，都比上一次的大，严格意义上<strong>增量字段</strong>是递增且不重复的。(区别于将<strong>时间戳字段</strong>作为增量字段，通常业务里的时间戳字段都不是严格意义上的增量字段)</p><p>现在<code>source</code>表里还没有数据，这里我随意在NIFI里拉了两个组件往<code>source</code>表里写数据，你不用关心这里的处理，我只是在准备来源表的数据，你可以使用任何方式向<code>source</code>表里写数据。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最终我一共向<code>source</code>表里写了253001条数据。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>2.新建一个Process Group</strong></p><p>在NIFI交互界面的顶层，有一排的可拖拽按钮，按照如下图示，拖拽一个<code>Process Group</code>出来。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们给这个<code>Process Group</code>起一个名字叫<code>体验流程</code>，在这里你可以简单的理解<code>Process Group</code>是一个组，在这个组里面可以设计你的流程，甚至设计其他的组。</p><p>双击<code>体验流程</code>这个<code>Process Group</code>，我们会进入一个新的空白的设计页面。</p><p><strong>3.新建一个GenerateTableFetch组件</strong></p><p>进入到<code>体验流程</code>这个<code>Process Group</code>后，如下图所示，我们左键点顶层第一个按钮，按住左键向空白页面拖拽，会弹出一个<code>Add Processor</code>的对话框。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在这个对话框里，我们找到<code>GenerateTableFetch</code>这个组件。</p><blockquote><p>简单说一下<code>GenerateTableFetch</code>这个组件，它的作用就是根据指定的表和表字段(通常是一个增量字段)，生成一批SQL语句，这些SQL是分页的(或者说分片的)，这样一张有很多数据的一张表，我们就可以通过多个SQL分批的查询出来，这样会更高效。如果直接去全表扫描一张大表，有可能会等待很长时间，有可能会因为数据太多发生一些异常，这都不是我们想看到的。</p></blockquote><p>双击<code>GenerateTableFetch</code>这个组件，这个组件就会出现在我们的设计页面上了。双击这个<code>GenerateTableFetch</code>组件或者鼠标右键选择<code>Configure</code>，会弹出<code>Configure Processor</code>对话框。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>Configure Processor</code>对话框有四个页签，这里我简单说明一下，不必纠结没有提及的那些配置究竟是什么意思。其他没有提及的配置你就当成是高级应用，不明白这些配置并不影响本文的阅读</p><p>SETTINGS：可以配置<code>Terminate</code>哪些RelationShip，<code>Terminate</code>你可以简单理解为我们忽略、不在意这个RelationShip。</p><blockquote><p>RelationShip：每一个Processor处理完数据得到的结果，一般会将他们传输出去，RelationShip就是他们传输的方向。具体哪部分数据传输到哪个方向，由具体的程序代码决定。每个组件的RelationShip可能都不一样，具体的含义需要查看各个组件的详细说明文档，你可以右键组件，选择<code>View usage</code>来查看这个组件具体的用法。这里我们要注意一点就是，每个组件的所有RelationShip都应该有所指向(下面会提到将一个组件连接到另一个组件，组件中间会有一个<code>Connection</code>的东西，这个<code>Connection</code>会包含一个或多个RelationShip，那么这样的RelationShip就是有所指向的。另外<code>Terminate</code>也算是有所指向)</p></blockquote><p>SCHEDUING：配置调度的地方，可用的调度的策略(<code>Scheduling Strategy</code>)有两种，一个是<code>Timer driven</code>,配置每多久执行一次调度。另一个是<code>CRON driven</code>,可以配置比如每天在几点几分执行一次调度。具体的调度时间是在<code>Run Schedule</code>里配置的。<code>Concurrent Tasks</code>是说一次调度，这个组件最多可以同时启动多少个任务来处理数据。<code>Execution</code>是针对集群的，你可以先不用理解，它是设置组件只在主节点运行还是在所有节点运行。</p><p>PROPERTIES：这个是每个组件的核心功能配置，每个组件的配置都是不一样的。</p><p>COMMENTS：注释，可以在里面添加一些描述信息。</p><p><strong>4.配置GenerateTableFetch组件</strong></p><p><code>SCHEDUING</code>页签，我们选择<code>Timer driven</code>,<code>Run Schedule</code>配置成<code>5 sec</code>,即每5秒调度一次。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>PROPERTIES</code>页签，如下图，我们通过<code>Database Connection Pooling Service</code>新建了一个<code>DBCPConnectionPool</code>数据库连接池服务，<code>Database Type</code>选择了<code>MySQL</code>,<code>Table Name</code>配置填写了来源表名称<code>source</code>,<code>Maximum-value Columns</code>我们配置了增量字段<code>increase</code></p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击Apply后，回到设计页面，我们发现组件左上角是一个感叹号，感叹号你可以理解为这个组件还没有满足运行的条件，把鼠标停留在感叹号上会有提示信息</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过提示信息我们看到两个问题，第一个是<code>DBCPConnectionPool</code>数据库连接池服务还不可用，另一个是当前的组件<code>success</code>和<code>failure</code>两个RelationShip还没有指向。</p><p><strong>5.配置DBCPConnectionPool服务</strong></p><p>如下图所示，鼠标右键点击空白页面，选择<code>Configure</code>，进入<code>Process Group</code>的配置页面</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>进入<code>Process Group</code>的配置页面后，选择<code>CONTROLLER SERVICES</code>页签，我们可以看到我们之前建的<code>DBCPConnectionPool</code>数据库连接池服务。点击齿轮形状的配置按钮，如下图所示会弹出<code>Configure Controller Service</code>的对话框。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击对话框的<code>PROPERTIES</code>页签，按如下图所示配置MySQL数据库的连接信息。</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里我们把本文的数据库连接列出来</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">jdbc:mysql://ip:port/nifi?</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">UTF-8&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">zeroDateTimeBehavior</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">convertToNull&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">tinyInt1isBit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">com.mysql.jdbc.Driver</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">驱动包需要自己去下载，然后添加到NIFI本机的某个地方</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">/data/nifi-1.11.4/jdbc/mysql-connector-java-5.1.46.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完毕后，点击APPLY，然后如下图，点击闪电符号按钮，启用<code>DBCPConnectionPool</code>数据库连接池服务。</p><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>6.配置GenerateTableFetch组件RelationShip</strong></p><p>回到设计页面，我们看到<code>GenerateTableFetch</code>这个组件黄色感叹号的提示信息关于<code>DBCPConnectionPool</code>的已经没有了，现在提示的是关于<code>RelationShip</code>的。</p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在我们通过新建<code>GenerateTableFetch</code>同样的方式，在设计页面新增一个<code>ExecuteSQLRecord</code>组件，然后将鼠标停留在<code>GenerateTableFetch</code>组件上，会出现一个箭头，点击拉取这个箭头然后指向<code>ExecuteSQLRecord</code></p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>指向的过程中会弹出<code>Create Connection</code>的配置页面，在里面的<code>For Relationships</code>勾选<code>success</code>(后期我们可以右键点击<code>Connection</code>进入配置页面)</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击<code>ADD</code>后，再次回到设计页面</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们看到<code>GenerateTableFetch</code>这个组件黄色感叹号的提示信息只剩下<code>failure</code> RelationShip的了。</p><p>此时我们再次到<code>GenerateTableFetch</code>的配置页面，在<code>SETTINGS</code>页面的<code>Automatically Terminate Relationships</code>里勾选<code>failure</code>。</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击<code>APPLY</code>后，<code>GenerateTableFetch</code>这个组件黄色感叹号就会消失了。</p><p><strong>7.配置ExecuteSQLRecord组件</strong></p><blockquote><p>简单说一下ExecuteSQLRecord组件，执行上游传输过来的SQL语句，然后将查询结果以指定的数据格式输出到下游。</p></blockquote><p>与配置<code>GenerateTableFetch</code>配置的操作流程都是大体相似的，这里不做重复性的叙述了，看过程图就可以了。</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>7.配置PutDatabaseRecord组件</strong></p><p>我们在设计页面上新增一个<code>PutDatabaseRecord</code>组件，并做相应配置</p><blockquote><p>简单说一下PutDatabaseRecord组件，以指定格式读取上游的数据，然后将数据<code>insert/update/delete</code>到指定的数据库表。</p></blockquote><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>8.运行整个数据处理流程</strong></p><p>右键点击每个组件选择start或者点击空白出选择start</p><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到已经有数据在流动被处理了。</p><p>写入数据总是比较慢的，这个时候我们可以适当的停止<code>PutDatabaseRecord</code>组件修改配置提高它的并发任务数(注意只有stop这个组件，才可以对它进行配置)</p><figure><img src="'+G+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当我们再次运行<code>PutDatabaseRecord</code>组件，在设计页面会发现流程报错了(这并不是意外，这是我设计好展示给你们看的效果)</p><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以看到<code>PutDatabaseRecord</code>的右上角有一个<code>8</code>,并且<code>GenerateTableFetch</code>组件右上角有一个红色告警，将鼠标停留在红色告警，会有提示信息。看报错信息的意思是说<code>GenerateTableFetch</code>无法获取到数据库连接。(<code>DBCPConnectionPool</code>数据库连接池默认是8个连接，但这8个全被<code>PutDatabaseRecord</code>拿去用了，<code>GenerateTableFetch</code>拿不到连接所以报错了。)</p><p>好了，上面的报错设计只是为了让你看到多任务时组件右上角会有任务数的提示，当发生异常时组件的右上角也会有红色告警信息。</p><p><strong>9.查看运行结果</strong></p><p>等待一段时间，流程中的数据都被处理完了(<code>Connection</code>中没有数据了)。然后我们去查询<code>target</code>表里一共被同步了多少数据，结果一看，也是<code>253001</code>条。</p><figure><img src="'+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>10.持续运行</strong></p><p>那么这就完了嘛？不，我们这个流程不是一个一次性任务，它是持续的。如下图所示</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时我们向<code>source</code>添加一条数据，它是第<code>253002</code>条</p><figure><img src="'+Q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>添加完后观察我们正在运行的流程，发现原本组件上那些<code>In</code>、<code>Out</code>已经为0的状态现在变成了1，说明刚才有数据流过了。</p><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后我们去查看<code>target</code>表，发现第<code>253002</code>条数据已经被同步过来了。</p><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>11.GenerateTableFetch监听增量字段</strong></p><p>这里简单说一下<code>GenerateTableFetch</code>增量同步数据的原理，右键点击<code>GenerateTableFetch</code>，选择<code>View state</code></p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如下图，我们可以看到<code>Compontent State</code>这个对话框里记录了<code>increase</code>的值。</p><figure><img src="'+V+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>state是NIFI提供的稳定、可靠的存储机制。它适合存储少量的数据，一般是一些状态信息。</p></blockquote><p><code>GenerateTableFetch</code>利用state记录了每次扫描<code>source</code>表<code>increase</code>最大的值，然后在下一次扫描生成SQL时，会扫描那些<code>increase</code>值大于state中记录的行，相应的生成查询这些行数据的SQL。这样就达到了增量抽取数据的目的</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>如果说你跟着本文一起操作或者仔细的阅读了整篇文章，那么我相信你已经入门Apache NIFI了 。</p>',113);function X(Y,$){const a=c("RouteLink");return d(),r("div",null,[H,p(" more "),J,e("ul",null,[e("li",null,[e("p",null,[i("我是直接编译的1.11.4的源码获取的安装包，将zip包上传到Linux，解压即可。如何下载源码及编译看"),n(a,{to:"/ApacheNIFI%E5%BC%80%E5%8F%91/001-%E7%BC%96%E8%AF%91NIFI%E6%BA%90%E7%A0%81.html"},{default:s(()=>[i("编译NIFI源码")]),_:1})])]),W,Z]),K,e("p",null,[i("好吧，我是骗你的，你还没有入门。这篇文章只是简单带你(替你)体验了一把Apache NIFI，如果想要入门，请看这篇文章"),n(a,{to:"/ApacheNIFI%E6%95%99%E7%A8%8B/003-NIFI%E5%85%A5%E9%97%A8.html"},{default:s(()=>[i("Apache NIFI入门(读完即入门)")]),_:1})])])}const ae=o(U,[["render",X],["__file","002-带你体验ApacheNIFI.html.vue"]]),ne=JSON.parse('{"path":"/ApacheNIFI%E6%95%99%E7%A8%8B/002-%E5%B8%A6%E4%BD%A0%E4%BD%93%E9%AA%8CApacheNIFI.html","title":"带你体验Apache NIFI","lang":"zh-CN","frontmatter":{"title":"带你体验Apache NIFI","date":"2020-05-27T00:00:00.000Z","category":"ApacheNIFI教程","tag":"NIFI","order":2,"star":1,"description":"初衷：对于一些新接触Apache NIFI的小伙伴来说，他们急于想体验NIFI，恨不得直接找到一篇文章，照着做就直接能够解决目前遇到的需求或者问题，回想当初的我，也是这个心态。其实这样的心态是不对的。好多加入NIFI学习群的新手同学都会有这个问题，一些基本的概念和知识点都没有掌握，然后提出了一堆很初级的问题，对于这些问题，我们可能已经回答了几十上百次，...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/ApacheNIFI%E6%95%99%E7%A8%8B/002-%E5%B8%A6%E4%BD%A0%E4%BD%93%E9%AA%8CApacheNIFI.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"带你体验Apache NIFI"}],["meta",{"property":"og:description","content":"初衷：对于一些新接触Apache NIFI的小伙伴来说，他们急于想体验NIFI，恨不得直接找到一篇文章，照着做就直接能够解决目前遇到的需求或者问题，回想当初的我，也是这个心态。其实这样的心态是不对的。好多加入NIFI学习群的新手同学都会有这个问题，一些基本的概念和知识点都没有掌握，然后提出了一堆很初级的问题，对于这些问题，我们可能已经回答了几十上百次，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:tag","content":"NIFI"}],["meta",{"property":"article:published_time","content":"2020-05-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"带你体验Apache NIFI\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"环境","slug":"环境","link":"#环境","children":[]},{"level":2,"title":"Apache NIFI 部署","slug":"apache-nifi-部署","link":"#apache-nifi-部署","children":[{"level":3,"title":"获取安装包","slug":"获取安装包","link":"#获取安装包","children":[]},{"level":3,"title":"部署Apache NIFI","slug":"部署apache-nifi","link":"#部署apache-nifi","children":[]}]},{"level":2,"title":"NIFI在手，跟我走！","slug":"nifi在手-跟我走","link":"#nifi在手-跟我走","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":12.06,"words":3619},"filePathRelative":"ApacheNIFI教程/002-带你体验ApacheNIFI.md","localizedDate":"2020年5月27日","excerpt":"<p>初衷：对于一些新接触Apache NIFI的小伙伴来说，他们急于想体验NIFI，恨不得直接找到一篇文章，照着做就直接能够解决目前遇到的需求或者问题，回想当初的我，也是这个心态。其实这样的心态是不对的。好多加入NIFI学习群的新手同学都会有这个问题，一些基本的概念和知识点都没有掌握，然后提出了一堆很初级的问题，对于这些问题，我们可能已经回答了几十上百次，厌倦了，所以大家一般会说\\"你先去看文档吧！\\"。其实，对于一个新手，直接看文档，也是一脸懵。所以在这里，我带领新手的你，新建一个同步的流程，并尽可能在新建流程的同时，穿插一些基本概念。跟随本文一起操作或者只是看看，最后你可能就找到了入门的感觉了。</p>\\n","autoDesc":true}');export{ae as comp,ne as data};
