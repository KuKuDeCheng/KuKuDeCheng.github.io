import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,a as l}from"./app-CtKwaxkk.js";const n={},o=l("<p>注解，也叫元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举同一层次。可以声明在包、类、字段、方法、局部变量、方法参数等前面，来对这些元素进行说明，注释等。</p><p>作用分类：</p><ol><li>编写文档：通过代码里的标识的元数据生成文档【生成文档doc文档】</li><li>代码分析：通过代码里的标识的元数据对代码进行分析【使用反射】</li><li>编译检查：通过代码里的标识的元数据让编译器能过实现基本的编译检查【Override】</li></ol><p>java提供了四个元注解，所谓元注解就是负责注解其他注解。</p><ol><li>@Target ：规定注解所修饰的对象范围。 <ol><li>ElementType.CONSTRUCTIR; 构造器声明</li><li>ElementType.FIELD; 成员变量，对象，属性（包括enum实例)</li><li>ElementType.LOCAL_VARIABLE; 局部变量声明</li><li>ElementType.METHOD ; 方法声明</li><li>ElementType.PACKAGE; 包声明</li><li>ElementType.PARAMETER;参数声明</li><li>ElementType.TYPE; 类、接口（包括注解类型）或enum声明</li></ol></li><li>@Retention ： 表示注解的生命周期 <ol><li>RetentionPolicy.SOUREC: 在源文件中有效</li><li>RetentionPolicy.CLASS; 在class文件中有效</li><li>RetentionPolicy.RUNTIME;在运行时有效</li></ol></li><li>@Inherited : 标记注解，主要说明了一种继承性，意思是子类可以继承父类中的该注解（注意：只有当被贴上@Inherited标签的注解被用在类上的时候子类才能获得这个注解）。</li><li>@Documented ： 用于描述其它类型的annotation应该被作为被标注的程序成员的公共API,因此可以被例如javadoc此类的工具文档化。</li></ol>",5),a=[o];function r(p,c){return i(),t("div",null,a)}const s=e(n,[["render",r],["__file","java注解.html.vue"]]),h=JSON.parse('{"path":"/JAVA/java%E6%B3%A8%E8%A7%A3.html","title":"java注解","lang":"zh-CN","frontmatter":{"title":"java注解","date":"2020-04-09T00:00:00.000Z","category":"Java","description":"注解，也叫元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举同一层次。可以声明在包、类、字段、方法、局部变量、方法参数等前面，来对这些元素进行说明，注释等。 作用分类： 编写文档：通过代码里的标识的元数据生成文档【生成文档doc文档】 代码分析：通过代码里的标识的元数据对代码进行分析【使用反射】 编译检查：通过代码里的标识的元数...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/JAVA/java%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"java注解"}],["meta",{"property":"og:description","content":"注解，也叫元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举同一层次。可以声明在包、类、字段、方法、局部变量、方法参数等前面，来对这些元素进行说明，注释等。 作用分类： 编写文档：通过代码里的标识的元数据生成文档【生成文档doc文档】 代码分析：通过代码里的标识的元数据对代码进行分析【使用反射】 编译检查：通过代码里的标识的元数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T11:40:02.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2020-04-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T11:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T11:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719488402000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":1}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"JAVA/java注解.md","localizedDate":"2020年4月9日","excerpt":"<p>注解，也叫元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举同一层次。可以声明在包、类、字段、方法、局部变量、方法参数等前面，来对这些元素进行说明，注释等。</p>\\n<p>作用分类：</p>\\n<ol>\\n<li>编写文档：通过代码里的标识的元数据生成文档【生成文档doc文档】</li>\\n<li>代码分析：通过代码里的标识的元数据对代码进行分析【使用反射】</li>\\n<li>编译检查：通过代码里的标识的元数据让编译器能过实现基本的编译检查【Override】</li>\\n</ol>\\n<p>java提供了四个元注解，所谓元注解就是负责注解其他注解。</p>\\n<ol>\\n<li>@Target ：规定注解所修饰的对象范围。\\n<ol>\\n<li>ElementType.CONSTRUCTIR;    构造器声明</li>\\n<li>ElementType.FIELD;     成员变量，对象，属性（包括enum实例)</li>\\n<li>ElementType.LOCAL_VARIABLE;    局部变量声明</li>\\n<li>ElementType.METHOD ; 方法声明</li>\\n<li>ElementType.PACKAGE; 包声明</li>\\n<li>ElementType.PARAMETER;参数声明</li>\\n<li>ElementType.TYPE; 类、接口（包括注解类型）或enum声明</li>\\n</ol>\\n</li>\\n<li>@Retention ： 表示注解的生命周期\\n<ol>\\n<li>RetentionPolicy.SOUREC: 在源文件中有效</li>\\n<li>RetentionPolicy.CLASS; 在class文件中有效</li>\\n<li>RetentionPolicy.RUNTIME;在运行时有效</li>\\n</ol>\\n</li>\\n<li>@Inherited : 标记注解，主要说明了一种继承性，意思是子类可以继承父类中的该注解（注意：只有当被贴上@Inherited标签的注解被用在类上的时候子类才能获得这个注解）。</li>\\n<li>@Documented ： 用于描述其它类型的annotation应该被作为被标注的程序成员的公共API,因此可以被例如javadoc此类的工具文档化。</li>\\n</ol>","autoDesc":true}');export{s as comp,h as data};
