import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as i,b as t,a as p,o as s}from"./app-DPxQZnZ9.js";const o="/assets/1-C-WwZNzf.jpeg",n="/assets/2-B9WLn7I5.jpeg",g="/assets/3-CJWtuAXy.gif",l="/assets/4-D8_boGfh.jpeg",r="/assets/5-BqIy1cI4.jpeg",c="/assets/6-CPTppI5v.jpeg",m="/assets/7-BxP26Mpg.jpeg",_="/assets/8-DTaACE_z.jpeg",f="/assets/9-D_7OvFsd.jpeg",d="/assets/10-wou-KRyp.jpeg",u="/assets/11-ag_fWqd5.jpeg",y="/assets/12-D2_6AdBX.jpeg",h="/assets/13-D26XWnyj.gif",z="/assets/14-Dm6lCLxG.gif",B="/assets/15-CtKuLgYF.jpeg",j="/assets/16-DgeIsMGh.jpeg",b="/assets/17-CA1V2ext.jpeg",x="/assets/18-aNtN1e1n.jpeg",E="/assets/19-C-mF6lVy.jpeg",T="/assets/20-B_akZjHj.gif",A="/assets/21-Neks-nci.gif",C="/assets/22-Xx68zGMC.jpeg",N="/assets/23-uCJh0X7z.jpeg",L="/assets/24-Bb_S9lql.jpeg",D="/assets/25-CZHUppLy.jpeg",Z="/assets/26-cQp8lts-.jpeg",P={},k=t("p",null,"什么是二叉查找树(BST)?",-1),S=t("ol",null,[t("li",null,"左子树上所有的节点的值均小于或等于他根节点的值"),t("li",null,"右子树上所有的节点的值均大于或等于他根节点的值"),t("li",null,"左右子树也分别是二叉排序树")],-1),v=p('<p>下面为标准的二叉排序树</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么这种结构有什么好处呢？现在试着查找226节点</p><p>初始状态： <img src="'+n+'" alt="" loading="lazy"></p><p>其实想要搜索值为226的节点很简单，搜索动画过程如下：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其实这就是二分查找的思想，最大的查找次数等同于二叉树的高度，插入节点的时候也是这样，一层一层的查找合适的位置然后插入，但他也有明显的缺陷，比如：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样不行，得想办法解决这个问题，需要一种策略来平衡二叉树，其中红黑树算法，就可以让二分查找树变成平衡二叉查找树</p><p>红黑树就是一种平衡的二叉查找树，说他平衡的意思是他不会变成“瘸子”，左腿特别长或者右腿特别长。除了符合二叉查找树的特性之外，还具体下列的特性：</p><ol><li><p>节点是红色或者黑色</p></li><li><p>根节点是黑色</p></li><li><p>每个叶子的节点都是黑色的空节点（NULL）</p></li><li><p>每个红色节点的两个子节点都是黑色的。</p></li><li><p>从任意节点到其每个叶子的所有路径都包含相同的黑色节点。</p></li></ol><p>下面为标准的红黑树，建议对照下面的图理解上边写的红黑树的性质</p><p><img src="'+c+'" alt="" loading="lazy"> （黑色的NULL节点可忽略）</p><p>当然，我们很容易就会发现，当插入或者删除一个节点，就会很容易破坏红黑树的特性，例如上面标准的红黑树，插入值为12的节点。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>插入之后发现仍然满足红黑树的要求！</p><p>但是如果插入值为21的节点呢？</p><p>如下图所示：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>插入21这个节点就破坏了红黑树，那么我们需要重新调整使其重新满足红黑树的特性，主要方法包括 变色、左旋、右旋。</p><p>先来看一下变色！为了符合红黑树的规则，会把节点红变黑或者黑变红。下图展示的是红黑树的部分，需要注意节点25并非根节点。因为21和22链接出现红色，不符合规则4，所以把22红变黑：</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但这样还是不符合规则5，所以需要把25黑变红，看下图：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么27也要变色</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样局部的变色完成了，现在看一下红黑树的全貌：</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>17和25是两个连续的红色节点，而根节点13不可能再变色了，那17只能是红色了，现在只变色是已经没有办法到达平衡的效果了，所以只能进行旋转了</p><p>接下来先讲一下什么是左旋转！通过动画举个例子吧！</p><p><img src="'+h+'" alt="" loading="lazy"><img src="'+z+'" alt="" loading="lazy"></p><p>左旋转思想示意图如下</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通俗点讲一下，可以看下面的左旋转静态示意图</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>按照左旋转，对上边已经变色完成之后图进行左旋转。</p><p><img src="'+b+'" alt="" loading="lazy"><img src="'+x+'" alt="" loading="lazy"></p><p>根节点必须是黑色，那么需要变色</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是，我们发现 17-13-8-1-6-NULL 经历了4个黑球，而17到其他叶子节点都是3个黑球，那么现在要考虑一下右旋了</p><p><img src="'+T+'" alt="" loading="lazy"><img src="'+A+'" alt="" loading="lazy"></p><p>可见右旋转的思想总结如下：</p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通俗点讲一下，可以看下面的右旋转静态示意图</p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来，对上边经过左旋转之后的图进行右旋转。</p><p><img src="'+L+'" alt="" loading="lazy"><img src="'+D+'" alt="" loading="lazy"></p><p>最后再变色</p><figure><img src="'+Z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Java中的Tree Map用的就是红黑树，函数中实现关联数组、实时计算、图像处理中的几何运算都会用到红黑树</p>',51);function F(I,M){return s(),e("div",null,[k,S,i(" more "),v,i(` 
![](./img/004/.gif)

![](./img/004/.jpeg) `)])}const X=a(P,[["render",F],["__file","什么是红黑树.html.vue"]]),G=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%A2%E9%BB%91%E6%A0%91.html","title":"什么是红黑树","lang":"zh-CN","frontmatter":{"title":"什么是红黑树","date":"2020-04-14T00:00:00.000Z","category":"算法","description":"什么是二叉查找树(BST)? 左子树上所有的节点的值均小于或等于他根节点的值 右子树上所有的节点的值均大于或等于他根节点的值 左右子树也分别是二叉排序树","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E7%AE%97%E6%B3%95/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%A2%E9%BB%91%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"什么是红黑树"}],["meta",{"property":"og:description","content":"什么是二叉查找树(BST)? 左子树上所有的节点的值均小于或等于他根节点的值 右子树上所有的节点的值均大于或等于他根节点的值 左右子树也分别是二叉排序树"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T11:40:02.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2020-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T11:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是红黑树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T11:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719488402000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":1}]},"readingTime":{"minutes":3.43,"words":1030},"filePathRelative":"算法/什么是红黑树.md","localizedDate":"2020年4月14日","excerpt":"<p>什么是二叉查找树(BST)?</p>\\n<ol>\\n<li>左子树上所有的节点的值均小于或等于他根节点的值</li>\\n<li>右子树上所有的节点的值均大于或等于他根节点的值</li>\\n<li>左右子树也分别是二叉排序树</li>\\n</ol>\\n","autoDesc":true}');export{X as comp,G as data};
