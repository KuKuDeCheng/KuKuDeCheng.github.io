import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as a,b as i,a as t,o as n}from"./app-BbBihsxx.js";const l="/assets/1-BL06g5ZC.png",p="/assets/2-3vvAjhB7.png",h="/assets/4-CZoHfX0j.png",r="/assets/3-DjCUJ4yD.png",o="/assets/5-n5n5zAaO.png",d="/assets/6-CvoVhgDQ.png",k="/assets/7-CmLP_k3F.png",c="/assets/8-dqAoImsz.png",g="/assets/9-MP5RkeSb.png",y="/assets/10-CziQtBtb.png",m="/assets/11-DX9qyKSd.png",u="/assets/12-BJc5mjRR.png",f="/assets/13-Bnhk2_Yw.png",B="/assets/14-p6XDm03s.png",F="/assets/15-TTlP7fTK.png",A="/assets/16-De0aUM3H.png",b="/assets/17-Bp9Ly402.png",v="/assets/18-Cms-brTK.png",I="/assets/19-CFdEWF4G.png",E={},_=i("p",null,"前言：本文重点在于通过模拟事故来探索Apache NIFI集群的高可用，情景假定有一个3节点的NIFI集群，其中某个节点因为未知原因与集群失联，研究集群(两个在联节点集群）和失联的节点会发生什么，各个节点上的数据会怎样。(注意：节点因为未知原因与集群失联区别于系统管理员手动卸载节点)。除此之外，其他不做重点。",-1),C=i("p",null,"我尽量详细描述探索过程，读者可以跟着本文一起实地操作验证。",-1),D=t(`<h3 id="搭建3节点伪集群" tabindex="-1"><a class="header-anchor" href="#搭建3节点伪集群"><span>搭建3节点伪集群</span></a></h3><p>本节简单说明一下在本地搭建一个3节点的伪集群配置。</p><p><strong>NIFI版本</strong>：nifi-1.12.0-SNAPSHOT(是的，你没看错，作者也是偶尔会给Apache贡献代码的人) <strong>本机系统</strong>：MacOS <strong>zookeeper</strong>：NIFI内置zookeeper</p><p>修改nifi.properties(我把需要修改的挑选了出来)</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Specifies whether or not this instance of NiFi should run an embedded ZooKeeper server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">nifi.state.management.embedded.zookeeper.start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 3个节点分别是8081 8082 8083</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">nifi.web.http.port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">8081</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># cluster node properties (only configure for cluster nodes) #</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">nifi.cluster.is.node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 3个节点分别是9081 9082 9083</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">nifi.cluster.node.protocol.port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">9081</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 3个节点分别是6341 6342 6343</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">nifi.cluster.load.balance.port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">6341</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># zookeeper properties, used for cluster management #</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">nifi.zookeeper.connect.string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">localhost:2181,localhost:2182,localhost:2183</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改zookeeper.properties(注意3.5.5之后客户端端口要配置在server字符串后面)</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 3个节点都一样</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">localhost:2111:3111</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">;2181</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">localhost:2222:3222</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">;2182</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server.3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">localhost:2333:3333</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">;2183</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改state-management.xml(3个节点都一样)</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">cluster-provider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;zk-provider&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Connect String&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;localhost:2181,localhost:2182,localhost:2183&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Root Node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;/nifi&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Session Timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;10 seconds&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Access Control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Open&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">cluster-provider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在3个节点的NIFI目录下(bin目录同级)，新建<code>state/zookeeper</code>,zookeeper文件夹里新建文件<code>myid</code>，3个节点分别写入<code>1</code>,<code>2</code>,<code>3</code></p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#3个节点分别写入 1 2 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">echo </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> myid</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，一个简单的本地可启动的3节点使用内置zookeeper的伪集群便配置好了。分别启动三个NIFI节点：</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>集群启动成功</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="模拟流程搭建" tabindex="-1"><a class="header-anchor" href="#模拟流程搭建"><span>模拟流程搭建</span></a></h3><p>拉取<code>GenerateFlow</code>(用于生成流文件)和<code>LogAttribute</code>(打印日志，输出流文件属性)两个组件。<code>GenerateFlow</code>设置为只在主节点运行(集群模式下，一个流程的第一个节点一般都要设置为主节点运行，可以避免处理重复的数据，这是设计NIFI数据流的常识，当然了ConsumeKafka之类的组件除外)。<code>LogAttribute</code>默认设置所有节点运行即可。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置<code>connection</code>为load balance(分发数据到各个节点，否则所有的数据其实都是在主节点运行处理)</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="探索集群节点失联后流文件的分布" tabindex="-1"><a class="header-anchor" href="#探索集群节点失联后流文件的分布"><span>探索集群节点失联后流文件的分布</span></a></h3><p>由上面的流程截图状态我们看到当前流程里集群有3个节点，一共有111个流文件，现在我们手动停止一个NIFI节点，模拟因未知原因节点失联</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后等待集群重新投票选举，选举完成后我们打开NIFI集群界面</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这时我们看到NIFI集群中只剩下了74个流文件了，缺失的那37个流文件还在失联的节点上。同时也可以看到，现在集群是不允许你修改流程的配置的，直到失联节点重新连回集群或者系统管理员卸载失联节点。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Apache NIFI设计就是如此，NIFI不是一个集群数据库(比如说GP之类)，它只是一个数据流处理工具，没必要在每个或者多个节点上备份流文件，这会增加额外的不必要的IO和磁盘存储，会影响到NIFI的性能。</p><p>(这里就省略了查看失联节点是否有37个流文件的描述，如果你要查看验证的话，首先将集群所有节点停止，然后启动我们模拟失联的那个节点，等到它启动成功后，这就是一个因为某些原因与集群失联的但仍在运行的节点)</p><p><strong>结论</strong>：<strong>如果其中一个节点发生故障，集群中的其他节点将不会自动承担丢失节点的负载。数据仍然存在于失联的NIFI节点上。</strong></p><h3 id="探索集群节点故障后流文件的处理" tabindex="-1"><a class="header-anchor" href="#探索集群节点故障后流文件的处理"><span>探索集群节点故障后流文件的处理</span></a></h3><p>我们重启失联节点恢复3节点伪集群，<code>connection</code>中已经有111个流文件(由上面的探索可知，这111个流文件是分布在3个节点上的)，此时我们启动<code>LogAttribute</code>组件，模拟集群中正在处理数据的动作。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>启动后，我们立马停止其中一个节点来模拟故障(这里我直接kill掉了一个节点)</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>等到集群完成重新选举打开集群界面，观察失联节点后的集群：</p><p><img src="'+y+'" alt="" loading="lazy"><img src="'+m+'" alt="" loading="lazy"><img src="'+u+'" alt="" loading="lazy"></p><p>通过上面3张图我们发现，<strong>失联节点后的集群仍然在处理数据</strong></p><p>那么失联节点如果仍在运行状态(不是被kill，没有stop)，会发生什么呢？</p><p>我们模拟因为未知原因，节点与集群失联但仍在运行(停止NIFI集群，重启失联NIFI节点)</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如下图，这是一个与集群失联的节点，我们还可以访问到它的用户界面</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过截图我们能看到这个失联节点它仍在处理数据，对比一下时间可以更清晰的看到这个NIFI节点在失联后仍在处理数据，最后一条<code>LogAttribute</code>打印的日志是<code>23:43:13</code>,下图是我关闭NIFI集群的时间<code>23:40:--</code>,并且我是在停止NIFI集群后才启动那个失联节点的。</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>(额外提一点，上面提到的这个失联节点，是可以修改流程的，这么设计是OK的，但我们如果是还想要这个节点顺利的重新连回集群，那么我们就要避免这个失联节点有修改流程的现象发生)</p><p><strong>结论</strong>：集群中有节点发生故障，集群仍然会继续处理数据，如果失联的节点也在运行的话，失联的节点也会继续处理数据。</p><h3 id="探索集群节点故障后设置为主节点运行的组件的状态" tabindex="-1"><a class="header-anchor" href="#探索集群节点故障后设置为主节点运行的组件的状态"><span>探索集群节点故障后设置为主节点运行的组件的状态</span></a></h3><p>重新连回节点恢复集群后，我们停止<code>LogAttribute</code>，启动<code>GenerateFlow</code></p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>重复上面模拟节点失联，查看集群<code>GenerateFlow</code>的状态</p><p><img src="'+b+'" alt="" loading="lazy"><img src="'+v+'" alt="" loading="lazy"></p><p>可以看到，设置为主节点运行的<code>GenerateFlow</code>仍在运行生成流文件。</p><p>而失联节点在观察了几分钟后，<code>GenerateFlow</code>都没有生成流文件。 <img src="'+I+'" alt="" loading="lazy"></p><p><strong>结论</strong>：集群中有节点发生故障，集群中设置为在主节点运行的组件仍继续运行处理数据，如果失联的节点也在运行的话，设置为在主节点运行的组件是不继续运行处理数据的。</p><h3 id="你可以继续验证" tabindex="-1"><a class="header-anchor" href="#你可以继续验证"><span>你可以继续验证</span></a></h3><p>你可以深入继续验证，将<code>GenerateFlow</code>设置为所有节点运行，也可以对应场景将<code>LogAttribute</code>设置为只在主节点运行，按照上面介绍的&#39;套路&#39;，来进一步验证集群中节点发生故障时，集群和失联节点的表现。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>首先在我们的流程设计是科学合理的大前提下，当集群节点发生故障时，在保证数据的完整性，准确性已经任务的持续执行方面，Apache NIFI集群是有一定程度的高可用的。如果失联的节点仍在运行，那么我们的数据是完整的，准确的。如果失联的节点宕掉了，而且这个节点上还有没处理完的流文件，那么在人工介入之前，这部分数据其实算是暂时丢失的，当然只要你集群还在，你的任务是一直在运行的。只要我们合理科学的使用Apache NIFI，做好集群的健康监控，他的集群模式应用在一些生产环境上，这种程度的集群高可用是完全可以支撑我们的业务的。(比如说支持业务的实时性比较高的一些同数据步流程)</p>',59);function N(z,x){return n(),e("div",null,[_,C,a(" more "),D])}const P=s(E,[["render",N],["__file","017-NIFI高可用.html.vue"]]),S=JSON.parse('{"path":"/ApacheNIFI%E6%95%99%E7%A8%8B/017-NIFI%E9%AB%98%E5%8F%AF%E7%94%A8.html","title":"探索NIFI集群的高可用","lang":"zh-CN","frontmatter":{"title":"探索NIFI集群的高可用","date":"2020-05-21T00:00:00.000Z","category":"ApacheNIFI教程","tag":"NIFI","order":17,"description":"前言：本文重点在于通过模拟事故来探索Apache NIFI集群的高可用，情景假定有一个3节点的NIFI集群，其中某个节点因为未知原因与集群失联，研究集群(两个在联节点集群）和失联的节点会发生什么，各个节点上的数据会怎样。(注意：节点因为未知原因与集群失联区别于系统管理员手动卸载节点)。除此之外，其他不做重点。 我尽量详细描述探索过程，读者可以跟着本文一...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/ApacheNIFI%E6%95%99%E7%A8%8B/017-NIFI%E9%AB%98%E5%8F%AF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"探索NIFI集群的高可用"}],["meta",{"property":"og:description","content":"前言：本文重点在于通过模拟事故来探索Apache NIFI集群的高可用，情景假定有一个3节点的NIFI集群，其中某个节点因为未知原因与集群失联，研究集群(两个在联节点集群）和失联的节点会发生什么，各个节点上的数据会怎样。(注意：节点因为未知原因与集群失联区别于系统管理员手动卸载节点)。除此之外，其他不做重点。 我尽量详细描述探索过程，读者可以跟着本文一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:tag","content":"NIFI"}],["meta",{"property":"article:published_time","content":"2020-05-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"探索NIFI集群的高可用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[{"level":3,"title":"搭建3节点伪集群","slug":"搭建3节点伪集群","link":"#搭建3节点伪集群","children":[]},{"level":3,"title":"模拟流程搭建","slug":"模拟流程搭建","link":"#模拟流程搭建","children":[]},{"level":3,"title":"探索集群节点失联后流文件的分布","slug":"探索集群节点失联后流文件的分布","link":"#探索集群节点失联后流文件的分布","children":[]},{"level":3,"title":"探索集群节点故障后流文件的处理","slug":"探索集群节点故障后流文件的处理","link":"#探索集群节点故障后流文件的处理","children":[]},{"level":3,"title":"探索集群节点故障后设置为主节点运行的组件的状态","slug":"探索集群节点故障后设置为主节点运行的组件的状态","link":"#探索集群节点故障后设置为主节点运行的组件的状态","children":[]},{"level":3,"title":"你可以继续验证","slug":"你可以继续验证","link":"#你可以继续验证","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":7.03,"words":2110},"filePathRelative":"ApacheNIFI教程/017-NIFI高可用.md","localizedDate":"2020年5月21日","excerpt":"<p>前言：本文重点在于通过模拟事故来探索Apache NIFI集群的高可用，情景假定有一个3节点的NIFI集群，其中某个节点因为未知原因与集群失联，研究集群(两个在联节点集群）和失联的节点会发生什么，各个节点上的数据会怎样。(注意：节点因为未知原因与集群失联区别于系统管理员手动卸载节点)。除此之外，其他不做重点。</p>\\n<p>我尽量详细描述探索过程，读者可以跟着本文一起实地操作验证。</p>\\n","autoDesc":true}');export{P as comp,S as data};
