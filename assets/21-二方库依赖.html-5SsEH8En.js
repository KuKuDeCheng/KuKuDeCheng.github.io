import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as e,a}from"./app-BeeusqHN.js";const n={},o=a('<ol><li>【强制】定义 GAV 遵从以下规则：</li></ol><ul><li>1） GroupID 格式：com.{公司/BU }.业务线 [.子业务线]，最多 4 级。</li></ul><div class="hint-container warning"><p class="hint-container-title">说明</p><p>{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><p>com.taobao.jstorm 或 com.alibaba.dubbo.register</p></div><ul><li>2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。</li></ul><div class="hint-container tip"><p class="hint-container-title">正例</p><p>dubbo-client / fastjson-api / jstorm-tool</p></div><ul><li>3）Version：详细规定参考下方。</li></ul><ol start="2"><li>【强制】二方库版本号命名方式：主版本号.次版本号.修订号</li></ol><ul><li>1）主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。</li><li>2）次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。</li><li>3）修订号：保持完全兼容性，修复 BUG、新增次要功能特性等。</li></ul><div class="hint-container warning"><p class="hint-container-title">说明</p><p>注意起始版本号必须为：1.0.0，而不是 0.0.1。</p></div><div class="hint-container caution"><p class="hint-container-title">反例</p><p>仓库内某二方库版本号从 1.0.0.0 开始，一直默默“升级”成 1.0.0.64，完全失去版本的语义信息。</p></div><ol start="3"><li>【强制】线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓 库进行查证，使 RELEASE 版本号有延续性，且版本号不允许覆盖升级。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p></div><ol start="4"><li>【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证。 说明：在升级时，进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<code>&lt;exclude&gt;</code>排除 jar 包。</li><li>【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</li><li>【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p></div><ol start="7"><li>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的lib 目录中。曾经出现过线下调试是正确的，发布到线上却出故障的先例。</p></div><ol start="8"><li>【推荐】底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。</li><li>【推荐】 所有 pom 文件中的依赖声明放在<code>&lt;dependencies&gt;</code>语句块中，所有版本仲裁放在<code>&lt;dependencyManagement&gt;</code>语句块中。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p><code>&lt;dependencyManagement&gt;</code>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而<code>&lt;dependencies&gt;</code>所有声明在主 pom 的<code>&lt;dependencies&gt;</code>里的依赖都会自动引入，并默认被所有的子项目继承。</p></div><ol><li>【推荐】二方库不要有配置项，最低限度不要再增加配置项。</li><li>【推荐】不要使用不稳定的工具包或者 Utils 类。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>不稳定指的是提供方无法做到向下兼容，在编译阶段正常，但在运行时产生异常，因此，尽量使用业界稳定的二方工具包。</p></div><ol><li>【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</li></ol><ul><li>1）精简可控原则。移除一切不必要的 API 和依赖，只包含 Service API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log具体实现，只依赖日志框架。</li><li>2）稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</li></ul>',23),l=[o];function c(r,s){return e(),i("div",null,l)}const m=t(n,[["render",c],["__file","21-二方库依赖.html.vue"]]),h=JSON.parse('{"path":"/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/21-%E4%BA%8C%E6%96%B9%E5%BA%93%E4%BE%9D%E8%B5%96.html","title":"二方库依赖","lang":"zh-CN","frontmatter":{"title":"二方库依赖","date":"2021-02-15T00:00:00.000Z","category":"阿里Java开发手册","order":21,"description":"【强制】定义 GAV 遵从以下规则： 1） GroupID 格式：com.{公司/BU }.业务线 [.子业务线]，最多 4 级。 说明 {公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。 正例 com.taobao.jstorm 或 com.alibaba.dubbo.register...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/21-%E4%BA%8C%E6%96%B9%E5%BA%93%E4%BE%9D%E8%B5%96.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"二方库依赖"}],["meta",{"property":"og:description","content":"【强制】定义 GAV 遵从以下规则： 1） GroupID 格式：com.{公司/BU }.业务线 [.子业务线]，最多 4 级。 说明 {公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。 正例 com.taobao.jstorm 或 com.alibaba.dubbo.register..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2021-02-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二方库依赖\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":3.77,"words":1131},"filePathRelative":"阿里Java开发手册/21-二方库依赖.md","localizedDate":"2021年2月15日","excerpt":"<ol>\\n<li>【强制】定义 GAV 遵从以下规则：</li>\\n</ol>\\n<ul>\\n<li>1） GroupID 格式：com.{公司/BU }.业务线 [.子业务线]，最多 4 级。</li>\\n</ul>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">说明</p>\\n<p>{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。</p>\\n</div>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">正例</p>\\n<p>com.taobao.jstorm 或 com.alibaba.dubbo.register</p>\\n</div>","autoDesc":true}');export{m as comp,h as data};
