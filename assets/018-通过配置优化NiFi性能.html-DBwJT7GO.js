import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,b as i,a as n,o as t}from"./app-CtKwaxkk.js";const r={},l=i("p",null,"NiFi的默认设置可以满足一般的运行和测试需求，但是如果想要处理大容量数据流，那就远远不够了。本文将介绍与NiFi性能有关的几个设置参数，让NiFi可以高效运转。",-1),o=i("p",null,"本文重点在如何优化初始配置或者对默认参数进行小幅修改，并不会深入讨论如何优化数据流设计和NiFi处理器。这些优化可以简单地可以通过编辑nifi.properties和bootstrap.conf实现，更多内容，可以去Apache官网(https://nifi.apache.org/docs.html)了。",-1),p=n(`<h2 id="nifi-properties-文件" tabindex="-1"><a class="header-anchor" href="#nifi-properties-文件"><span>nifi.properties 文件</span></a></h2><p>nifi.properties位于NiFi根目录下的conf中，文件包含若干区域。</p><h3 id="core-properties" tabindex="-1"><a class="header-anchor" href="#core-properties"><span>Core Properties</span></a></h3><p>其中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.bored.yield.duration=10 millis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过限制空闲进程占用CPU的时间来达到控制CPU占用的目的。默认值10 millis，很大程度上降低了CPU利用率。调低参数会降低系统延迟提高性能，但会增大CPU占用率，鱼和熊掌不可兼得，需要根据具体性能需求来设置。</p><p>另一个参数与NiFi性能无关，但是可以提高浏览器界面的反应速度。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.ui.autorefresh.interval=30 sec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>顾名思义，这是浏览器会话的自动刷新间隔。降低可以让用户更好地实时了解系统的状况，但是也会增大网络带宽占用。如果没有强烈的需求，建议保持默认值，然后可以点击NiFi web界面中的“refresh status”手动刷新。</p><h3 id="h2-settings" tabindex="-1"><a class="header-anchor" href="#h2-settings"><span>H2 Settings</span></a></h3><p>NiFi有两种H2数据库，user DB记录用户登录信息，History DB记录编辑历史。通常这两个数据库都较小，保存在默认路径与否不会对性能有什么影响。但是，为了维护方便，建议移动到安装路径以外，这样在更新时不会被覆盖。</p><h3 id="flowfile-repository" tabindex="-1"><a class="header-anchor" href="#flowfile-repository"><span>FlowFile Repository</span></a></h3><p>FlowFile记录数据流的状态信息，如果损坏，会造成NiFi正在处理的文件丢失，而储存空间不足是损坏FlowFile的最常见的原因。最好也将FlowFile保存在NiFi根路径以外，尽量不要与高I/O的程序、content repository 或者 provenance repository在相同的磁盘上。FlowFile的路径通过下面的参数修改</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.flowfile.repository.directory=./flowfile_repository</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为了提高性能，FlowFile驻留JVM内存以提高处理器之间文件传递的效率。但是，放任FlowFile过度地占用JVM内存，当内存不足时，性能也会受到极大的影响。因此，需要限制驻留内存的FlowFile数量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.queue.swap.threshold=20000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>设置每个连接的队列中可以驻留内存的FlowFile数量。若队列经常超过20000个FlowFile，需要增加以提高性能，同时管理员也要根据实际情况调整堆(heap)的大小(在bootstrap.conf中修改，见后文)。</p><h3 id="content-repository" tabindex="-1"><a class="header-anchor" href="#content-repository"><span>Content Repository</span></a></h3><p>数据流的实际内容保存在Content中，通常应该独占高性能高容量的磁盘。</p><p>默认值为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.content.repository.directory.default=./content_repository</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>若单一RAID仍不能满足需求，可以为一个NiFi实例设置多个Content repository。NiFi将以轮询调度方式存储文件。将nifi.content.repository.directory.default删除或注释，然后为每个Content Repository增加一行参数指定路径，如下例子。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.content.repository.directory.contS1R1=/cont-repo1/content_repository nifi.content.repository.directory.contS1R2=/cont-repo2/content_repository nifi.content.repository.directory.contS1R3=/cont-repo3/content_repository</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意，contS1R1, contS1R2, contS1R3，只是人为起的名字，可以自由命名。同一个节点上的Content repositor不可以重名，不同节点之间可以重名，但为了便于在web UI中管理，每个节点的Content repository的名字最好是不同的。</p><h3 id="provenance-repository" tabindex="-1"><a class="header-anchor" href="#provenance-repository"><span>Provenance Repository</span></a></h3><p>与Content repository设置原理基本相同，也最好独占硬盘。</p><p>默认设置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.provenance.repository.directory.default=./provenance_repository</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以指定多个Provenance Repository</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.provenance.repository.directory.provS1R1=/prov-repo1/provenance_repository nifi.provenance.repository.directory.provS1R2=/prov-repo2/provenance_repository</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命名规则也与Content repository相同。</p><p>Provenance Repository 允许多用户同时查询。当访问用户很多时，可以修改执行查询任务的线程数量以提高性能。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.provenance.repository.query.threads=2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样我们也可以修改执行Provenance Repository索引任务的线程数量</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.provenance.repository.index.threads=1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当遇到“The rate of the dataflow is exceeding the provenance recording rate. Slowing down flow to accommodate.”提示时，说明flowfile数量过多， Provenance处理速度不足，限制性能。需要增加索引线程的数量加以应对。不过，需要说明的是，此非多多益善，总的资源有限，增加了索引线程数，势必会争夺其他任务的资源。建议在无前文所示的提示出现时使用默认值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.provenance.repository.index.shard.size=500 MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该参数影响Provenance查询时占用多少堆空间。提高该参数会增加查询性能，但是会增加堆消耗。默认值为500MB(注：此参数“影响”堆占用，并不代表会占用500MB的堆)</p><p>尽管Provenance功能不能被禁用，我们可以将其设置从“PersistentProvenanceRepository”改为“VolatileProvenanceRepository”，从而让Provenance Repository保存在堆中而非硬盘上，每次JVM重启就会丢失，但是可以提高性能。</p><p>通过</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>nifi.provenance.repository.buffer.size=100000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>限制provenance能用多少堆</p><hr><p>以下是一个NiFi节点示例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CPU: 24 - 48 cores</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>Memory: 64 -128 GB</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>Hard Drive configuration:</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>(1 hardware RAID 1 array)</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>(2 or more hardware RAID 10 arrays)</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>RAID 1 array (This could also be a RAID 10) logical volumes:</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>-/</span></span>
<span class="line"><span>-/boot</span></span>
<span class="line"><span>-/home</span></span>
<span class="line"><span>-/var</span></span>
<span class="line"><span>-/var/log/nifi-logs &lt;-- point all your NiFi logs (logback.xml) here</span></span>
<span class="line"><span>-/opt &lt;-- install NiFi here under a sub-directory</span></span>
<span class="line"><span>-/database-repo &lt;-- point NiFi database repository here</span></span>
<span class="line"><span>-/flowfile-repo &lt;-- point NiFi flowfile repository here</span></span>
<span class="line"><span>1st RAID 10 array logical volumes:</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>-/cont-repo1 &lt;-- point NiFi content repository here</span></span>
<span class="line"><span>2nd RAID 10 array logical volumes:</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>- /prov-repo1 &lt;-- point NiFi provenance repository here</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>3rd RAID 10 array logical volumes (recommended):</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>- / cont-repo2 &lt;-- point 2nd NiFI content repository here</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>4th + RAID arrays logical volumes (optional):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bootstrap-conf-文件" tabindex="-1"><a class="header-anchor" href="#bootstrap-conf-文件"><span>Bootstrap.conf 文件</span></a></h2><p>此文件包含NiFi启动的相关设置，Java堆大小和Java系统属性。本文重点讨论针对大数据高性能数据流的优化问题。</p><h3 id="jvm-内存设置-jvm-memory-setting" tabindex="-1"><a class="header-anchor" href="#jvm-内存设置-jvm-memory-setting"><span>JVM 内存设置(JVM Memory Setting)</span></a></h3><p>设置堆大小。Xms设置初始堆大小，Xmx堆最大值。默认值太小，对于初学者建议分别修改为4GB和8GB</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>java.arg.2=-Xms8gjava.arg.3=-Xmx8g</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果在NiFi日志文件中出现“out of memory”错误，说明可能有内存泄露或是内存不足，可以尝试提高堆大小。但是堆太大，会增加垃圾回收(Garbage Collection)的耗时，有时会造成明显的系统卡顿，若假死时间超过节点heartbeat的间隔，会造成节点离线。因此，需要选择一个较好的垃圾回收策略。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>java.arg.13=-XX:+UseG1GC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注：HDF2.x 默认就是使用G1垃圾回收，因此无需特别修改。</p><h3 id="以下设置只针对java-7-hdf-1-x-或者nifi-0-x" tabindex="-1"><a class="header-anchor" href="#以下设置只针对java-7-hdf-1-x-或者nifi-0-x"><span>以下设置只针对Java 7 (HDF 1.x 或者NiFi 0.x)</span></a></h3><p>增加代码缓存(去掉注释符号)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>java.arg.7=-XX:ReservedCodeCacheSize=256m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Java代码缓存用以暂存Java bytecode。当缓存满了的时候，编译器会被关闭，进而影响NiFi，而且除非重启，不然编译器不会再打开。代码缓存的默认大小与Java版本有关，有可能只有32M大小，所以增加代码缓存到256M能有效避免因为缓存填满而编译器被关闭。</p><p>去掉如下两行的注释开启代码缓存刷新，当剩余空间为10m时刷新代码缓存，腾出空间。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>java.arg.8=-XX:CodeCacheFlushingMinimumFreeSpace=10mjava.arg.9=-XX:+UseCodeCacheFlushing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>去掉上图中的最后两行注释增加permgen空间</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>java.arg.11=-XX:PermSize=128Mjava.arg.12=-XX:MaxPermSize=128M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>permgen存储Java和Nifi的类，128M对于NiFi现存的类/处理器绰绰有余，但是如果新增了大量自定义的类，则需要根据实际情况增加permgen的值。</p><h3 id="以下设置针对java-8-hdf-1-x-2-x-nifi-0-x-1-x" tabindex="-1"><a class="header-anchor" href="#以下设置针对java-8-hdf-1-x-2-x-nifi-0-x-1-x"><span>以下设置针对Java 8 (HDF 1.x 2.x, NiFi 0.x 1.x)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>java.arg.7=-XX:ReservedCodeCacheSize=256mjava.arg.8=-XX:CodeCacheMinimumFreeSpace=10mjava.arg.9=-XX:+UseCodeCacheFlushing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>与java 7同理，注意java.arg.11和java.arg.12不适用java 8。</p><p>原文链接：</p><p>https://community.hortonworks.com/articles/7882/hdfnifi-best-practices-for-setting-up-a-high-perfo.html</p>`,67);function d(c,h){return t(),a("div",null,[l,o,e(" more "),e(" more "),p])}const b=s(r,[["render",d],["__file","018-通过配置优化NiFi性能.html.vue"]]),m=JSON.parse('{"path":"/ApacheNIFI%E6%95%99%E7%A8%8B/018-%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96NiFi%E6%80%A7%E8%83%BD.html","title":"通过配置优化NiFi性能","lang":"zh-CN","frontmatter":{"title":"通过配置优化NiFi性能","date":"2020-06-09T00:00:00.000Z","category":"ApacheNIFI教程","tag":"NIFI","description":"NiFi的默认设置可以满足一般的运行和测试需求，但是如果想要处理大容量数据流，那就远远不够了。本文将介绍与NiFi性能有关的几个设置参数，让NiFi可以高效运转。 本文重点在如何优化初始配置或者对默认参数进行小幅修改，并不会深入讨论如何优化数据流设计和NiFi处理器。这些优化可以简单地可以通过编辑nifi.properties和bootstrap.co...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/ApacheNIFI%E6%95%99%E7%A8%8B/018-%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96NiFi%E6%80%A7%E8%83%BD.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"通过配置优化NiFi性能"}],["meta",{"property":"og:description","content":"NiFi的默认设置可以满足一般的运行和测试需求，但是如果想要处理大容量数据流，那就远远不够了。本文将介绍与NiFi性能有关的几个设置参数，让NiFi可以高效运转。 本文重点在如何优化初始配置或者对默认参数进行小幅修改，并不会深入讨论如何优化数据流设计和NiFi处理器。这些优化可以简单地可以通过编辑nifi.properties和bootstrap.co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T11:40:02.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:tag","content":"NIFI"}],["meta",{"property":"article:published_time","content":"2020-06-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T11:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"通过配置优化NiFi性能\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T11:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"nifi.properties 文件","slug":"nifi-properties-文件","link":"#nifi-properties-文件","children":[{"level":3,"title":"Core Properties","slug":"core-properties","link":"#core-properties","children":[]},{"level":3,"title":"H2 Settings","slug":"h2-settings","link":"#h2-settings","children":[]},{"level":3,"title":"FlowFile Repository","slug":"flowfile-repository","link":"#flowfile-repository","children":[]},{"level":3,"title":"Content Repository","slug":"content-repository","link":"#content-repository","children":[]},{"level":3,"title":"Provenance Repository","slug":"provenance-repository","link":"#provenance-repository","children":[]}]},{"level":2,"title":"Bootstrap.conf 文件","slug":"bootstrap-conf-文件","link":"#bootstrap-conf-文件","children":[{"level":3,"title":"JVM 内存设置(JVM Memory Setting)","slug":"jvm-内存设置-jvm-memory-setting","link":"#jvm-内存设置-jvm-memory-setting","children":[]},{"level":3,"title":"以下设置只针对Java 7 (HDF 1.x 或者NiFi 0.x)","slug":"以下设置只针对java-7-hdf-1-x-或者nifi-0-x","link":"#以下设置只针对java-7-hdf-1-x-或者nifi-0-x","children":[]},{"level":3,"title":"以下设置针对Java 8 (HDF 1.x 2.x, NiFi 0.x 1.x)","slug":"以下设置针对java-8-hdf-1-x-2-x-nifi-0-x-1-x","link":"#以下设置针对java-8-hdf-1-x-2-x-nifi-0-x-1-x","children":[]}]}],"git":{"createdTime":1719488402000,"updatedTime":1719488402000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":1}]},"readingTime":{"minutes":6.4,"words":1919},"filePathRelative":"ApacheNIFI教程/018-通过配置优化NiFi性能.md","localizedDate":"2020年6月9日","excerpt":"<p>NiFi的默认设置可以满足一般的运行和测试需求，但是如果想要处理大容量数据流，那就远远不够了。本文将介绍与NiFi性能有关的几个设置参数，让NiFi可以高效运转。</p>\\n<p>本文重点在如何优化初始配置或者对默认参数进行小幅修改，并不会深入讨论如何优化数据流设计和NiFi处理器。这些优化可以简单地可以通过编辑nifi.properties和bootstrap.conf实现，更多内容，可以去Apache官网(https://nifi.apache.org/docs.html)了。</p>\\n","autoDesc":true}');export{b as comp,m as data};
