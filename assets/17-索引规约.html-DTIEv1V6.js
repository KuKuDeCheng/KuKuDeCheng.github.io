import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,a as e}from"./app-yELfxIoD.js";const a={},o=e('<ol><li>【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p></div><ol start="2"><li>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>即使双表 join 也要注意表索引、SQL 性能。</p></div><ol start="3"><li>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</p></div><ol start="4"><li>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></div><ol start="5"><li>【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p>where a=? and b=? order by c; 索引：a_b_c</p></div><div class="hint-container caution"><p class="hint-container-title">反例</p><p>索引如果存在范围查询，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b; 索引 a_b 无法排序。</p></div><ol start="6"><li>【推荐】利用覆盖索引来进行查询操作，避免回表。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><p>能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。</p></div><ol start="7"><li>【推荐】利用延迟关联或者子查询优化超多分页场景。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><p>MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL改写。</p></div><div class="hint-container tip"><p class="hint-container-title">正例</p><p>先快速定位需要获取的 id 段，然后再关联： <code>SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</code></p></div><ol start="8"><li>【推荐】SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好。</li></ol><div class="hint-container warning"><p class="hint-container-title">说明</p><ul><li>1） consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。</li><li>2） ref 指的是使用普通的索引（normal index）。</li><li>3） range 对索引进行范围检索。</li></ul></div><div class="hint-container caution"><p class="hint-container-title">反例</p><p>explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range还低，与全表扫描是小巫见大巫。</p></div><ol start="9"><li>【推荐】建组合索引的时候，区分度最高的在最左边。</li></ol><div class="hint-container tip"><p class="hint-container-title">正例</p><p>如果 where a=? and b=?，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</p></div><div class="hint-container warning"><p class="hint-container-title">说明</p><p>存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c&gt;? and d=? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即建立组合索引 idx_d_c。</p></div><ol start="10"><li>【推荐】防止因字段类型不同造成的隐式转换，导致索引失效。</li><li>【参考】创建索引时避免有如下极端误解：</li></ol><ul><li>1） 索引宁滥勿缺。认为一个查询就需要建一个索引。</li><li>2） 吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。</li><li>3） 抵制惟一索引。认为惟一索引一律需要在应用层通过“先查后插”方式解决。</li></ul>',25),l=[o];function r(c,s){return n(),i("div",null,l)}const h=t(a,[["render",r],["__file","17-索引规约.html.vue"]]),m=JSON.parse('{"path":"/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/17-%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6.html","title":"索引规约","lang":"zh-CN","frontmatter":{"title":"索引规约","date":"2021-02-15T00:00:00.000Z","category":"阿里Java开发手册","order":17,"description":"【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。 说明 不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。 【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询...","head":[["meta",{"property":"og:url","content":"https://zhangchengk.github.io/%E9%98%BF%E9%87%8CJava%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/17-%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6.html"}],["meta",{"property":"og:site_name","content":"Panda诚的博客"}],["meta",{"property":"og:title","content":"索引规约"}],["meta",{"property":"og:description","content":"【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。 说明 不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。 【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T13:31:00.000Z"}],["meta",{"property":"article:author","content":"Panda诚"}],["meta",{"property":"article:published_time","content":"2021-02-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T13:31:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"索引规约\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T13:31:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Panda诚\\",\\"url\\":\\"https://zhangchengk.github.io/about/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1719488402000,"updatedTime":1719495060000,"contributors":[{"name":"zhangcheng","email":"zhangchengk@yonyou.com","commits":2}]},"readingTime":{"minutes":3.83,"words":1150},"filePathRelative":"阿里Java开发手册/17-索引规约.md","localizedDate":"2021年2月15日","excerpt":"<ol>\\n<li>【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</li>\\n</ol>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">说明</p>\\n<p>不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p>\\n</div>\\n<ol start=\\"2\\">\\n<li>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。</li>\\n</ol>","autoDesc":true}');export{h as comp,m as data};
